!function(t,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n();else if("function"==typeof define&&define.amd)define([],n);else{var r=n();for(var e in r)("object"==typeof exports?exports:t)[e]=r[e]}}(window,function(){return function(t){var n={};function r(e){if(n[e])return n[e].exports;var o=n[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)r.d(e,o,function(n){return t[n]}.bind(null,o));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=53)}([function(t,n,r){var e=r(24)("wks"),o=r(12),i=r(1).Symbol,u="function"==typeof i;(t.exports=function(t){return e[t]||(e[t]=u&&i[t]||(u?i:o)("Symbol."+t))}).store=e},function(t,n){var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(t,n,r){var e=r(3);t.exports=function(t){if(!e(t))throw TypeError(t+" is not an object!");return t}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,r){var e=r(5),o=r(18);t.exports=r(6)?function(t,n,r){return e.f(t,n,o(1,r))}:function(t,n,r){return t[n]=r,t}},function(t,n,r){var e=r(2),o=r(36),i=r(25),u=Object.defineProperty;n.f=r(6)?Object.defineProperty:function(t,n,r){if(e(t),n=i(n,!0),e(r),o)try{return u(t,n,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[n]=r.value),t}},function(t,n,r){t.exports=!r(9)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n,r){var e=r(1),o=r(4),i=r(8),u=r(12)("src"),c=Function.toString,f=(""+c).split("toString");r(11).inspectSource=function(t){return c.call(t)},(t.exports=function(t,n,r,c){var s="function"==typeof r;s&&(i(r,"name")||o(r,"name",n)),t[n]!==r&&(s&&(i(r,u)||o(r,u,t[n]?""+t[n]:f.join(String(n)))),t===e?t[n]=r:c?t[n]?t[n]=r:o(t,n,r):(delete t[n],o(t,n,r)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||c.call(this)})},function(t,n){var r={}.hasOwnProperty;t.exports=function(t,n){return r.call(t,n)}},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,r){var e=r(64),o=r(14);t.exports=function(t){return e(o(t))}},function(t,n){var r=t.exports={version:"2.6.1"};"number"==typeof __e&&(__e=r)},function(t,n){var r=0,e=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+e).toString(36))}},function(t,n){t.exports={}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n){var r=Math.ceil,e=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?e:r)(t)}},function(t,n){t.exports=!1},function(t,n,r){var e=r(1),o=r(11),i=r(4),u=r(7),c=r(19),f=function(t,n,r){var s,a,l,p,v=t&f.F,y=t&f.G,h=t&f.S,g=t&f.P,d=t&f.B,b=y?e:h?e[n]||(e[n]={}):(e[n]||{}).prototype,x=y?o:o[n]||(o[n]={}),m=x.prototype||(x.prototype={});for(s in y&&(r=n),r)l=((a=!v&&b&&void 0!==b[s])?b:r)[s],p=d&&a?c(l,e):g&&"function"==typeof l?c(Function.call,l):l,b&&u(b,s,l,t&f.U),x[s]!=l&&i(x,s,p),g&&m[s]!=l&&(m[s]=l)};e.core=o,f.F=1,f.G=2,f.S=4,f.P=8,f.B=16,f.W=32,f.U=64,f.R=128,t.exports=f},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n,r){var e=r(60);t.exports=function(t,n,r){if(e(t),void 0===n)return t;switch(r){case 1:return function(r){return t.call(n,r)};case 2:return function(r,e){return t.call(n,r,e)};case 3:return function(r,e,o){return t.call(n,r,e,o)}}return function(){return t.apply(n,arguments)}}},function(t,n,r){var e=r(5).f,o=r(8),i=r(0)("toStringTag");t.exports=function(t,n,r){t&&!o(t=r?t:t.prototype,i)&&e(t,i,{configurable:!0,value:n})}},function(t,n,r){var e=r(40),o=r(28);t.exports=Object.keys||function(t){return e(t,o)}},function(t,n,r){var e=r(15),o=Math.min;t.exports=function(t){return t>0?o(e(t),9007199254740991):0}},function(t,n){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,n,r){var e=r(11),o=r(1),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,n){return i[t]||(i[t]=void 0!==n?n:{})})("versions",[]).push({version:e.version,mode:r(16)?"pure":"global",copyright:"Â© 2018 Denis Pushkarev (zloirock.ru)"})},function(t,n,r){var e=r(3);t.exports=function(t,n){if(!e(t))return t;var r,o;if(n&&"function"==typeof(r=t.toString)&&!e(o=r.call(t)))return o;if("function"==typeof(r=t.valueOf)&&!e(o=r.call(t)))return o;if(!n&&"function"==typeof(r=t.toString)&&!e(o=r.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,n,r){var e=r(12)("meta"),o=r(3),i=r(8),u=r(5).f,c=0,f=Object.isExtensible||function(){return!0},s=!r(9)(function(){return f(Object.preventExtensions({}))}),a=function(t){u(t,e,{value:{i:"O"+ ++c,w:{}}})},l=t.exports={KEY:e,NEED:!1,fastKey:function(t,n){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,e)){if(!f(t))return"F";if(!n)return"E";a(t)}return t[e].i},getWeak:function(t,n){if(!i(t,e)){if(!f(t))return!0;if(!n)return!1;a(t)}return t[e].w},onFreeze:function(t){return s&&l.NEED&&f(t)&&!i(t,e)&&a(t),t}}},function(t,n,r){var e=r(24)("keys"),o=r(12);t.exports=function(t){return e[t]||(e[t]=o(t))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,r){var e=r(2),o=r(68),i=r(28),u=r(27)("IE_PROTO"),c=function(){},f=function(){var t,n=r(37)("iframe"),e=i.length;for(n.style.display="none",r(69).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),f=t.F;e--;)delete f.prototype[i[e]];return f()};t.exports=Object.create||function(t,n){var r;return null!==t?(c.prototype=e(t),r=new c,c.prototype=null,r[u]=t):r=f(),void 0===n?r:o(r,n)}},function(t,n,r){"use strict";var e=r(16),o=r(17),i=r(7),u=r(4),c=r(13),f=r(73),s=r(20),a=r(74),l=r(0)("iterator"),p=!([].keys&&"next"in[].keys()),v=function(){return this};t.exports=function(t,n,r,y,h,g,d){f(r,n,y);var b,x,m,w=function(t){if(!p&&t in O)return O[t];switch(t){case"keys":case"values":return function(){return new r(this,t)}}return function(){return new r(this,t)}},S=n+" Iterator",_="values"==h,j=!1,O=t.prototype,P=O[l]||O["@@iterator"]||h&&O[h],k=P||w(h),F=h?_?w("entries"):k:void 0,L="Array"==n&&O.entries||P;if(L&&(m=a(L.call(new t)))!==Object.prototype&&m.next&&(s(m,S,!0),e||"function"==typeof m[l]||u(m,l,v)),_&&P&&"values"!==P.name&&(j=!0,k=function(){return P.call(this)}),e&&!d||!p&&!j&&O[l]||u(O,l,k),c[n]=k,c[S]=v,h)if(b={values:_?k:w("values"),keys:g?k:w("keys"),entries:F},d)for(x in b)x in O||i(O,x,b[x]);else o(o.P+o.F*(p||j),n,b);return b}},function(t,n,r){var e=r(14);t.exports=function(t){return Object(e(t))}},function(t,n,r){var e=r(15),o=r(14);t.exports=function(t){return function(n,r){var i,u,c=String(o(n)),f=e(r),s=c.length;return f<0||f>=s?t?"":void 0:(i=c.charCodeAt(f))<55296||i>56319||f+1===s||(u=c.charCodeAt(f+1))<56320||u>57343?t?c.charAt(f):i:t?c.slice(f,f+2):u-56320+(i-55296<<10)+65536}}},function(t,n,r){var e=r(23),o=r(0)("toStringTag"),i="Arguments"==e(function(){return arguments}());t.exports=function(t){var n,r,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),o))?r:i?e(n):"Object"==(u=e(n))&&"function"==typeof n.callee?"Arguments":u}},function(t,n,r){"use strict";var e,o,i=r(59),u=RegExp.prototype.exec,c=String.prototype.replace,f=u,s=(e=/a/,o=/b*/g,u.call(e,"a"),u.call(o,"a"),0!==e.lastIndex||0!==o.lastIndex),a=void 0!==/()??/.exec("")[1];(s||a)&&(f=function(t){var n,r,e,o,f=this;return a&&(r=new RegExp("^"+f.source+"$(?!\\s)",i.call(f))),s&&(n=f.lastIndex),e=u.call(f,t),s&&e&&(f.lastIndex=f.global?e.index+e[0].length:n),a&&e&&e.length>1&&c.call(e[0],r,function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(e[o]=void 0)}),e}),t.exports=f},function(t,n,r){t.exports=!r(6)&&!r(9)(function(){return 7!=Object.defineProperty(r(37)("div"),"a",{get:function(){return 7}}).a})},function(t,n,r){var e=r(3),o=r(1).document,i=e(o)&&e(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,n,r){var e=r(1),o=r(11),i=r(16),u=r(39),c=r(5).f;t.exports=function(t){var n=o.Symbol||(o.Symbol=i?{}:e.Symbol||{});"_"==t.charAt(0)||t in n||c(n,t,{value:u.f(t)})}},function(t,n,r){n.f=r(0)},function(t,n,r){var e=r(8),o=r(10),i=r(65)(!1),u=r(27)("IE_PROTO");t.exports=function(t,n){var r,c=o(t),f=0,s=[];for(r in c)r!=u&&e(c,r)&&s.push(r);for(;n.length>f;)e(c,r=n[f++])&&(~i(s,r)||s.push(r));return s}},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,r){var e=r(40),o=r(28).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return e(t,o)}},function(t,n,r){var e=r(29),o=r(18),i=r(10),u=r(25),c=r(8),f=r(36),s=Object.getOwnPropertyDescriptor;n.f=r(6)?s:function(t,n){if(t=i(t),n=u(n,!0),f)try{return s(t,n)}catch(t){}if(c(t,n))return o(!e.f.call(t,n),t[n])}},function(t,n,r){"use strict";var e=r(72),o=r(45),i=r(13),u=r(10);t.exports=r(31)(Array,"Array",function(t,n){this._t=u(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,o(1)):o(0,"keys"==n?r:"values"==n?t[r]:[r,t[r]])},"values"),i.Arguments=i.Array,e("keys"),e("values"),e("entries")},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,r){var e=r(7);t.exports=function(t,n,r){for(var o in n)e(t,o,n[o],r);return t}},function(t,n){t.exports=function(t,n,r,e){if(!(t instanceof n)||void 0!==e&&e in t)throw TypeError(r+": incorrect invocation!");return t}},function(t,n,r){var e=r(19),o=r(78),i=r(79),u=r(2),c=r(22),f=r(80),s={},a={};(n=t.exports=function(t,n,r,l,p){var v,y,h,g,d=p?function(){return t}:f(t),b=e(r,l,n?2:1),x=0;if("function"!=typeof d)throw TypeError(t+" is not iterable!");if(i(d)){for(v=c(t.length);v>x;x++)if((g=n?b(u(y=t[x])[0],y[1]):b(t[x]))===s||g===a)return g}else for(h=d.call(t);!(y=h.next()).done;)if((g=o(h,b,y.value,n))===s||g===a)return g}).BREAK=s,n.RETURN=a},function(t,n,r){var e=r(3);t.exports=function(t,n){if(!e(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},function(t,n){t.exports=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}},function(t,n){function r(t,n){for(var r=0;r<n.length;r++){var e=n[r];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(t,e.key,e)}}t.exports=function(t,n,e){return n&&r(t.prototype,n),e&&r(t,e),t}},function(t,n){t.exports=function(t,n,r){return n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t}},function(t,n,r){"use strict";r.r(n),r.d(n,"MessageCentre",function(){return s}),r.d(n,"Utiltool",function(){return a});r(54);var e=r(50),o=r.n(e),i=r(51),u=r.n(i),c=r(52),f=r.n(c),s=(r(61),r(62),r(71),r(44),r(75),r(76),function(){this.messageArr=new Map,this.sub=function(t,n){n.fn,n.context,n.args;var r=Array.prototype.slice.call(arguments,1)[0];r.once=!1;var e=this.messageArr.get(t)||[];e.push(r),this.messageArr.set(t,e)},this.pub=function(t){var n=(this.messageArr.get(t)||[]).filter(function(t,n){var r=t.fn,e=t.context,o=t.args,i=t.once;if(r.apply(e,o),!i)return t});this.messageArr.set(t,n)},this.subOnce=function(t,n){n.fn,n.context,n.args;var r=Array.prototype.slice.call(arguments,1)[0];r.once=!0;var e=this.messageArr.get(t)||[];e.push(r),this.messageArr.set(t,e)},this.removeSub=function(t){var n=this.messageArr.get(t);n=[],this.messageArr.set(t,n)},this.clearMessageCenter=function(){this.messageArr.clear()},this.getMessageName=function(){var t=this.messageArr.keys(),n=[],r=!0,e=!1,o=void 0;try{for(var i,u=t[Symbol.iterator]();!(r=(i=u.next()).done);r=!0){var c=i.value;n.push(c)}}catch(t){e=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(e)throw o}}return n}}),a=function(){function t(){o()(this,t),f()(this,"str",/\s+/g)}return u()(t,null,[{key:"isEmpty",value:function(t){return!(!t||""===t||null==t)&&""!==t.replace(this.str,"")}}]),t}()},function(t,n,r){"use strict";var e=r(2),o=r(32),i=r(22),u=r(15),c=r(55),f=r(56),s=Math.max,a=Math.min,l=Math.floor,p=/\$([$&`']|\d\d?|<[^>]*>)/g,v=/\$([$&`']|\d\d?)/g;r(57)("replace",2,function(t,n,r,y){return[function(e,o){var i=t(this),u=null==e?void 0:e[n];return void 0!==u?u.call(e,i,o):r.call(String(i),e,o)},function(t,n){var o=y(r,t,this,n);if(o.done)return o.value;var l=e(t),p=String(this),v="function"==typeof n;v||(n=String(n));var g=l.global;if(g){var d=l.unicode;l.lastIndex=0}for(var b=[];;){var x=f(l,p);if(null===x)break;if(b.push(x),!g)break;""===String(x[0])&&(l.lastIndex=c(p,i(l.lastIndex),d))}for(var m,w="",S=0,_=0;_<b.length;_++){x=b[_];for(var j=String(x[0]),O=s(a(u(x.index),p.length),0),P=[],k=1;k<x.length;k++)P.push(void 0===(m=x[k])?m:String(m));var F=x.groups;if(v){var L=[j].concat(P,O,p);void 0!==F&&L.push(F);var M=String(n.apply(void 0,L))}else M=h(j,p,O,P,F,n);O>=S&&(w+=p.slice(S,O)+M,S=O+j.length)}return w+p.slice(S)}];function h(t,n,e,i,u,c){var f=e+t.length,s=i.length,a=v;return void 0!==u&&(u=o(u),a=p),r.call(c,a,function(r,o){var c;switch(o.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,e);case"'":return n.slice(f);case"<":c=u[o.slice(1,-1)];break;default:var a=+o;if(0===a)return o;if(a>s){var p=l(a/10);return 0===p?o:p<=s?void 0===i[p-1]?o.charAt(1):i[p-1]+o.charAt(1):o}c=i[a-1]}return void 0===c?"":c})}})},function(t,n,r){"use strict";var e=r(33)(!0);t.exports=function(t,n,r){return n+(r?e(t,n).length:1)}},function(t,n,r){"use strict";var e=r(34),o=RegExp.prototype.exec;t.exports=function(t,n){var r=t.exec;if("function"==typeof r){var i=r.call(t,n);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==e(t))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(t,n)}},function(t,n,r){"use strict";r(58);var e=r(7),o=r(4),i=r(9),u=r(14),c=r(0),f=r(35),s=c("species"),a=!i(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),l=function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var r="ab".split(t);return 2===r.length&&"a"===r[0]&&"b"===r[1]}();t.exports=function(t,n,r){var p=c(t),v=!i(function(){var n={};return n[p]=function(){return 7},7!=""[t](n)}),y=v?!i(function(){var n=!1,r=/a/;return r.exec=function(){return n=!0,null},"split"===t&&(r.constructor={},r.constructor[s]=function(){return r}),r[p](""),!n}):void 0;if(!v||!y||"replace"===t&&!a||"split"===t&&!l){var h=/./[p],g=r(u,p,""[t],function(t,n,r,e,o){return n.exec===f?v&&!o?{done:!0,value:h.call(n,r,e)}:{done:!0,value:t.call(r,n,e)}:{done:!1}}),d=g[0],b=g[1];e(String.prototype,t,d),o(RegExp.prototype,p,2==n?function(t,n){return b.call(t,this,n)}:function(t){return b.call(t,this)})}}},function(t,n,r){"use strict";var e=r(35);r(17)({target:"RegExp",proto:!0,forced:e!==/./.exec},{exec:e})},function(t,n,r){"use strict";var e=r(2);t.exports=function(){var t=e(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,r){r(38)("asyncIterator")},function(t,n,r){"use strict";var e=r(1),o=r(8),i=r(6),u=r(17),c=r(7),f=r(26).KEY,s=r(9),a=r(24),l=r(20),p=r(12),v=r(0),y=r(39),h=r(38),g=r(63),d=r(67),b=r(2),x=r(3),m=r(10),w=r(25),S=r(18),_=r(30),j=r(70),O=r(43),P=r(5),k=r(21),F=O.f,L=P.f,M=j.f,T=e.Symbol,E=e.JSON,z=E&&E.stringify,J=v("_hidden"),Q=v("toPrimitive"),V={}.propertyIsEnumerable,q=a("symbol-registry"),N=a("symbols"),X=a("op-symbols"),$=Object.prototype,A="function"==typeof T,K=e.QObject,U=!K||!K.prototype||!K.prototype.findChild,W=i&&s(function(){return 7!=_(L({},"a",{get:function(){return L(this,"a",{value:7}).a}})).a})?function(t,n,r){var e=F($,n);e&&delete $[n],L(t,n,r),e&&t!==$&&L($,n,e)}:L,Y=function(t){var n=N[t]=_(T.prototype);return n._k=t,n},G=A&&"symbol"==typeof T.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof T},Z=function(t,n,r){return t===$&&Z(X,n,r),b(t),n=w(n,!0),b(r),o(N,n)?(r.enumerable?(o(t,J)&&t[J][n]&&(t[J][n]=!1),r=_(r,{enumerable:S(0,!1)})):(o(t,J)||L(t,J,S(1,{})),t[J][n]=!0),W(t,n,r)):L(t,n,r)},D=function(t,n){b(t);for(var r,e=g(n=m(n)),o=0,i=e.length;i>o;)Z(t,r=e[o++],n[r]);return t},H=function(t){var n=V.call(this,t=w(t,!0));return!(this===$&&o(N,t)&&!o(X,t))&&(!(n||!o(this,t)||!o(N,t)||o(this,J)&&this[J][t])||n)},B=function(t,n){if(t=m(t),n=w(n,!0),t!==$||!o(N,n)||o(X,n)){var r=F(t,n);return!r||!o(N,n)||o(t,J)&&t[J][n]||(r.enumerable=!0),r}},C=function(t){for(var n,r=M(m(t)),e=[],i=0;r.length>i;)o(N,n=r[i++])||n==J||n==f||e.push(n);return e},R=function(t){for(var n,r=t===$,e=M(r?X:m(t)),i=[],u=0;e.length>u;)!o(N,n=e[u++])||r&&!o($,n)||i.push(N[n]);return i};A||(c((T=function(){if(this instanceof T)throw TypeError("Symbol is not a constructor!");var t=p(arguments.length>0?arguments[0]:void 0),n=function(r){this===$&&n.call(X,r),o(this,J)&&o(this[J],t)&&(this[J][t]=!1),W(this,t,S(1,r))};return i&&U&&W($,t,{configurable:!0,set:n}),Y(t)}).prototype,"toString",function(){return this._k}),O.f=B,P.f=Z,r(42).f=j.f=C,r(29).f=H,r(41).f=R,i&&!r(16)&&c($,"propertyIsEnumerable",H,!0),y.f=function(t){return Y(v(t))}),u(u.G+u.W+u.F*!A,{Symbol:T});for(var I="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;I.length>tt;)v(I[tt++]);for(var nt=k(v.store),rt=0;nt.length>rt;)h(nt[rt++]);u(u.S+u.F*!A,"Symbol",{for:function(t){return o(q,t+="")?q[t]:q[t]=T(t)},keyFor:function(t){if(!G(t))throw TypeError(t+" is not a symbol!");for(var n in q)if(q[n]===t)return n},useSetter:function(){U=!0},useSimple:function(){U=!1}}),u(u.S+u.F*!A,"Object",{create:function(t,n){return void 0===n?_(t):D(_(t),n)},defineProperty:Z,defineProperties:D,getOwnPropertyDescriptor:B,getOwnPropertyNames:C,getOwnPropertySymbols:R}),E&&u(u.S+u.F*(!A||s(function(){var t=T();return"[null]"!=z([t])||"{}"!=z({a:t})||"{}"!=z(Object(t))})),"JSON",{stringify:function(t){for(var n,r,e=[t],o=1;arguments.length>o;)e.push(arguments[o++]);if(r=n=e[1],(x(n)||void 0!==t)&&!G(t))return d(n)||(n=function(t,n){if("function"==typeof r&&(n=r.call(this,t,n)),!G(n))return n}),e[1]=n,z.apply(E,e)}}),T.prototype[Q]||r(4)(T.prototype,Q,T.prototype.valueOf),l(T,"Symbol"),l(Math,"Math",!0),l(e.JSON,"JSON",!0)},function(t,n,r){var e=r(21),o=r(41),i=r(29);t.exports=function(t){var n=e(t),r=o.f;if(r)for(var u,c=r(t),f=i.f,s=0;c.length>s;)f.call(t,u=c[s++])&&n.push(u);return n}},function(t,n,r){var e=r(23);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==e(t)?t.split(""):Object(t)}},function(t,n,r){var e=r(10),o=r(22),i=r(66);t.exports=function(t){return function(n,r,u){var c,f=e(n),s=o(f.length),a=i(u,s);if(t&&r!=r){for(;s>a;)if((c=f[a++])!=c)return!0}else for(;s>a;a++)if((t||a in f)&&f[a]===r)return t||a||0;return!t&&-1}}},function(t,n,r){var e=r(15),o=Math.max,i=Math.min;t.exports=function(t,n){return(t=e(t))<0?o(t+n,0):i(t,n)}},function(t,n,r){var e=r(23);t.exports=Array.isArray||function(t){return"Array"==e(t)}},function(t,n,r){var e=r(5),o=r(2),i=r(21);t.exports=r(6)?Object.defineProperties:function(t,n){o(t);for(var r,u=i(n),c=u.length,f=0;c>f;)e.f(t,r=u[f++],n[r]);return t}},function(t,n,r){var e=r(1).document;t.exports=e&&e.documentElement},function(t,n,r){var e=r(10),o=r(42).f,i={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return u.slice()}}(t):o(e(t))}},function(t,n,r){for(var e=r(44),o=r(21),i=r(7),u=r(1),c=r(4),f=r(13),s=r(0),a=s("iterator"),l=s("toStringTag"),p=f.Array,v={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},y=o(v),h=0;h<y.length;h++){var g,d=y[h],b=v[d],x=u[d],m=x&&x.prototype;if(m&&(m[a]||c(m,a,p),m[l]||c(m,l,d),f[d]=p,b))for(g in e)m[g]||i(m,g,e[g],!0)}},function(t,n,r){var e=r(0)("unscopables"),o=Array.prototype;null==o[e]&&r(4)(o,e,{}),t.exports=function(t){o[e][t]=!0}},function(t,n,r){"use strict";var e=r(30),o=r(18),i=r(20),u={};r(4)(u,r(0)("iterator"),function(){return this}),t.exports=function(t,n,r){t.prototype=e(u,{next:o(1,r)}),i(t,n+" Iterator")}},function(t,n,r){var e=r(8),o=r(32),i=r(27)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),e(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,n,r){"use strict";var e=r(33)(!0);r(31)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,r=this._i;return r>=n.length?{value:void 0,done:!0}:(t=e(n,r),this._i+=t.length,{value:t,done:!1})})},function(t,n,r){"use strict";var e=r(77),o=r(49);t.exports=r(82)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var n=e.getEntry(o(this,"Map"),t);return n&&n.v},set:function(t,n){return e.def(o(this,"Map"),0===t?0:t,n)}},e,!0)},function(t,n,r){"use strict";var e=r(5).f,o=r(30),i=r(46),u=r(19),c=r(47),f=r(48),s=r(31),a=r(45),l=r(81),p=r(6),v=r(26).fastKey,y=r(49),h=p?"_s":"size",g=function(t,n){var r,e=v(n);if("F"!==e)return t._i[e];for(r=t._f;r;r=r.n)if(r.k==n)return r};t.exports={getConstructor:function(t,n,r,s){var a=t(function(t,e){c(t,a,n,"_i"),t._t=n,t._i=o(null),t._f=void 0,t._l=void 0,t[h]=0,null!=e&&f(e,r,t[s],t)});return i(a.prototype,{clear:function(){for(var t=y(this,n),r=t._i,e=t._f;e;e=e.n)e.r=!0,e.p&&(e.p=e.p.n=void 0),delete r[e.i];t._f=t._l=void 0,t[h]=0},delete:function(t){var r=y(this,n),e=g(r,t);if(e){var o=e.n,i=e.p;delete r._i[e.i],e.r=!0,i&&(i.n=o),o&&(o.p=i),r._f==e&&(r._f=o),r._l==e&&(r._l=i),r[h]--}return!!e},forEach:function(t){y(this,n);for(var r,e=u(t,arguments.length>1?arguments[1]:void 0,3);r=r?r.n:this._f;)for(e(r.v,r.k,this);r&&r.r;)r=r.p},has:function(t){return!!g(y(this,n),t)}}),p&&e(a.prototype,"size",{get:function(){return y(this,n)[h]}}),a},def:function(t,n,r){var e,o,i=g(t,n);return i?i.v=r:(t._l=i={i:o=v(n,!0),k:n,v:r,p:e=t._l,n:void 0,r:!1},t._f||(t._f=i),e&&(e.n=i),t[h]++,"F"!==o&&(t._i[o]=i)),t},getEntry:g,setStrong:function(t,n,r){s(t,n,function(t,r){this._t=y(t,n),this._k=r,this._l=void 0},function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?a(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,a(1))},r?"entries":"values",!r,!0),l(n)}}},function(t,n,r){var e=r(2);t.exports=function(t,n,r,o){try{return o?n(e(r)[0],r[1]):n(r)}catch(n){var i=t.return;throw void 0!==i&&e(i.call(t)),n}}},function(t,n,r){var e=r(13),o=r(0)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(e.Array===t||i[o]===t)}},function(t,n,r){var e=r(34),o=r(0)("iterator"),i=r(13);t.exports=r(11).getIteratorMethod=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[e(t)]}},function(t,n,r){"use strict";var e=r(1),o=r(5),i=r(6),u=r(0)("species");t.exports=function(t){var n=e[t];i&&n&&!n[u]&&o.f(n,u,{configurable:!0,get:function(){return this}})}},function(t,n,r){"use strict";var e=r(1),o=r(17),i=r(7),u=r(46),c=r(26),f=r(48),s=r(47),a=r(3),l=r(9),p=r(83),v=r(20),y=r(84);t.exports=function(t,n,r,h,g,d){var b=e[t],x=b,m=g?"set":"add",w=x&&x.prototype,S={},_=function(t){var n=w[t];i(w,t,"delete"==t?function(t){return!(d&&!a(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(d&&!a(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return d&&!a(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,r){return n.call(this,0===t?0:t,r),this})};if("function"==typeof x&&(d||w.forEach&&!l(function(){(new x).entries().next()}))){var j=new x,O=j[m](d?{}:-0,1)!=j,P=l(function(){j.has(1)}),k=p(function(t){new x(t)}),F=!d&&l(function(){for(var t=new x,n=5;n--;)t[m](n,n);return!t.has(-0)});k||((x=n(function(n,r){s(n,x,t);var e=y(new b,n,x);return null!=r&&f(r,g,e[m],e),e})).prototype=w,w.constructor=x),(P||F)&&(_("delete"),_("has"),g&&_("get")),(F||O)&&_(m),d&&w.clear&&delete w.clear}else x=h.getConstructor(n,t,g,m),u(x.prototype,r),c.NEED=!0;return v(x,t),S[t]=x,o(o.G+o.W+o.F*(x!=b),S),d||h.setStrong(x,t,g),x}},function(t,n,r){var e=r(0)("iterator"),o=!1;try{var i=[7][e]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!o)return!1;var r=!1;try{var i=[7],u=i[e]();u.next=function(){return{done:r=!0}},i[e]=function(){return u},t(i)}catch(t){}return r}},function(t,n,r){var e=r(3),o=r(85).set;t.exports=function(t,n,r){var i,u=n.constructor;return u!==r&&"function"==typeof u&&(i=u.prototype)!==r.prototype&&e(i)&&o&&o(t,i),t}},function(t,n,r){var e=r(3),o=r(2),i=function(t,n){if(o(t),!e(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,e){try{(e=r(19)(Function.call,r(43).f(Object.prototype,"__proto__").set,2))(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,r){return i(t,r),n?t.__proto__=r:e(t,r),t}}({},!1):void 0),check:i}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy1hYnN0cmFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwiYSIsImkiLCJ3aW5kb3ciLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJzdG9yZSIsInVpZCIsIlVTRV9TWU1CT0wiLCJnbG9iYWwiLCJNYXRoIiwic2VsZiIsIkZ1bmN0aW9uIiwiX19nIiwiaXNPYmplY3QiLCJpdCIsIlR5cGVFcnJvciIsImRQIiwiY3JlYXRlRGVzYyIsImYiLCJhbk9iamVjdCIsIklFOF9ET01fREVGSU5FIiwidG9QcmltaXRpdmUiLCJPIiwiUCIsIkF0dHJpYnV0ZXMiLCJlIiwiaGlkZSIsImhhcyIsIlNSQyIsIiR0b1N0cmluZyIsIlRQTCIsInNwbGl0IiwiaW5zcGVjdFNvdXJjZSIsInZhbCIsInNhZmUiLCJpc0Z1bmN0aW9uIiwiam9pbiIsIlN0cmluZyIsInRoaXMiLCJleGVjIiwiSU9iamVjdCIsImRlZmluZWQiLCJjb3JlIiwidmVyc2lvbiIsIl9fZSIsImlkIiwicHgiLCJyYW5kb20iLCJjb25jYXQiLCJ1bmRlZmluZWQiLCJ0b1N0cmluZyIsImNlaWwiLCJmbG9vciIsImlzTmFOIiwicmVkZWZpbmUiLCJjdHgiLCIkZXhwb3J0IiwidHlwZSIsInNvdXJjZSIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiSVNfQklORCIsIkIiLCJ0YXJnZXQiLCJleHBQcm90byIsIlUiLCJXIiwiUiIsImJpdG1hcCIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiYUZ1bmN0aW9uIiwiZm4iLCJ0aGF0IiwibGVuZ3RoIiwiYiIsImFwcGx5IiwiYXJndW1lbnRzIiwiZGVmIiwiVEFHIiwidGFnIiwic3RhdCIsIiRrZXlzIiwiZW51bUJ1Z0tleXMiLCJrZXlzIiwidG9JbnRlZ2VyIiwibWluIiwic2xpY2UiLCJwdXNoIiwiY29weXJpZ2h0IiwidmFsdWVPZiIsIk1FVEEiLCJzZXREZXNjIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwidyIsIm1ldGEiLCJLRVkiLCJORUVEIiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsInNoYXJlZCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiZFBzIiwiSUVfUFJPVE8iLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwic3JjIiwiY29udGVudFdpbmRvdyIsImRvY3VtZW50Iiwib3BlbiIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJyZXN1bHQiLCJMSUJSQVJZIiwiSXRlcmF0b3JzIiwiJGl0ZXJDcmVhdGUiLCJzZXRUb1N0cmluZ1RhZyIsImdldFByb3RvdHlwZU9mIiwiSVRFUkFUT1IiLCJCVUdHWSIsInJldHVyblRoaXMiLCJCYXNlIiwiTkFNRSIsIkNvbnN0cnVjdG9yIiwibmV4dCIsIkRFRkFVTFQiLCJJU19TRVQiLCJGT1JDRUQiLCJtZXRob2RzIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRNZXRob2QiLCJraW5kIiwicHJvdG8iLCJERUZfVkFMVUVTIiwiVkFMVUVTX0JVRyIsIiRuYXRpdmUiLCIkZGVmYXVsdCIsIiRlbnRyaWVzIiwiJGFueU5hdGl2ZSIsImVudHJpZXMiLCJ2YWx1ZXMiLCJUT19TVFJJTkciLCJwb3MiLCJjaGFyQ29kZUF0IiwiY2hhckF0IiwiY29mIiwiQVJHIiwiVCIsInRyeUdldCIsImNhbGxlZSIsInJlMSIsInJlMiIsInJlZ2V4cEZsYWdzIiwibmF0aXZlRXhlYyIsIlJlZ0V4cCIsIm5hdGl2ZVJlcGxhY2UiLCJyZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJOUENHX0lOQ0xVREVEIiwic3RyIiwibGFzdEluZGV4IiwicmVDb3B5IiwibWF0Y2giLCJyZSIsImluZGV4IiwiaXMiLCJjcmVhdGVFbGVtZW50Iiwid2tzRXh0IiwiJFN5bWJvbCIsInRvSU9iamVjdCIsImFycmF5SW5kZXhPZiIsIm5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJwSUUiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiYWRkVG9VbnNjb3BhYmxlcyIsInN0ZXAiLCJBcnJheSIsIml0ZXJhdGVkIiwiX3QiLCJfaSIsIl9rIiwiQXJndW1lbnRzIiwiZG9uZSIsImZvcmJpZGRlbkZpZWxkIiwiaXNBcnJheUl0ZXIiLCJ0b0xlbmd0aCIsImdldEl0ZXJGbiIsIkJSRUFLIiwiUkVUVVJOIiwiaXRlcmFibGUiLCJpdGVyYXRvciIsIml0ZXJGbiIsIlRZUEUiLCJpbnN0YW5jZSIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwib2JqIiwiTWVzc2FnZUNlbnRyZSIsIm1lc3NhZ2VBcnIiLCJNYXAiLCJzdWIiLCJfcmVmIiwiY29udGV4dCIsImFyZ3MiLCJmbGV4Q29udGV4Iiwib25jZSIsImZuQXJyIiwic2V0IiwicHViIiwibmV3Rm5BcnIiLCJmaWx0ZXIiLCJpdGVtIiwic3ViT25jZSIsIl9yZWYyIiwicmVtb3ZlU3ViIiwiY2xlYXJNZXNzYWdlQ2VudGVyIiwiY2xlYXIiLCJnZXRNZXNzYWdlTmFtZSIsIm5hbWVBcnIiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uIiwiX2RpZEl0ZXJhdG9yRXJyb3IiLCJfaXRlcmF0b3JFcnJvciIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiZXJyIiwicmV0dXJuIiwiVXRpbHRvb2wiLCJkYXRhIiwidG9PYmplY3QiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJyZWdFeHBFeGVjIiwibWF4IiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIlJFUExBQ0UiLCIkcmVwbGFjZSIsIm1heWJlQ2FsbE5hdGl2ZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwicmVnZXhwIiwicmVzIiwicngiLCJmdW5jdGlvbmFsUmVwbGFjZSIsImZ1bGxVbmljb2RlIiwidW5pY29kZSIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsIm1hdGNoZWQiLCJwb3NpdGlvbiIsImNhcHR1cmVzIiwiaiIsIm5hbWVkQ2FwdHVyZXMiLCJncm91cHMiLCJyZXBsYWNlckFyZ3MiLCJyZXBsYWNlbWVudCIsImdldFN1YnN0aXR1dGlvbiIsInRhaWxQb3MiLCJzeW1ib2xzIiwiY2giLCJjYXB0dXJlIiwiYXQiLCJjbGFzc29mIiwiYnVpbHRpbkV4ZWMiLCJmYWlscyIsIndrcyIsInJlZ2V4cEV4ZWMiLCJTUEVDSUVTIiwiUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMiLCJTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMiLCJvcmlnaW5hbEV4ZWMiLCJTWU1CT0wiLCJERUxFR0FURVNfVE9fU1lNQk9MIiwiREVMRUdBVEVTX1RPX0VYRUMiLCJleGVjQ2FsbGVkIiwiY29uc3RydWN0b3IiLCJuYXRpdmVSZWdFeHBNZXRob2QiLCJmbnMiLCJuYXRpdmVNZXRob2QiLCJhcmcyIiwiZm9yY2VTdHJpbmdNZXRob2QiLCJzdHJmbiIsInJ4Zm4iLCJzdHJpbmciLCJhcmciLCJmb3JjZWQiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwic3RpY2t5IiwiREVTQ1JJUFRPUlMiLCIkZmFpbHMiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsImlzQXJyYXkiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BEIiwiJERQIiwiZ09QTiIsIiRKU09OIiwiSlNPTiIsIl9zdHJpbmdpZnkiLCJzdHJpbmdpZnkiLCJISURERU4iLCJUT19QUklNSVRJVkUiLCJpc0VudW0iLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJPYmplY3RQcm90byIsIlVTRV9OQVRJVkUiLCJRT2JqZWN0Iiwic2V0dGVyIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsIkQiLCJwcm90b0Rlc2MiLCJ3cmFwIiwic3ltIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydHkiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCIkc2V0IiwiZXM2U3ltYm9scyIsIndlbGxLbm93blN5bWJvbHMiLCJrIiwiZm9yIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiZGVmaW5lUHJvcGVydGllcyIsInJlcGxhY2VyIiwiJHJlcGxhY2VyIiwiZ2V0S2V5cyIsImdPUFMiLCJnZXRTeW1ib2xzIiwidG9BYnNvbHV0ZUluZGV4IiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImVsIiwiZnJvbUluZGV4IiwiZG9jdW1lbnRFbGVtZW50Iiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsIiRpdGVyYXRvcnMiLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvIiwiJGF0IiwicG9pbnQiLCJzdHJvbmciLCJ2YWxpZGF0ZSIsImVudHJ5IiwiZ2V0RW50cnkiLCJ2IiwicmVkZWZpbmVBbGwiLCJhbkluc3RhbmNlIiwiZm9yT2YiLCIkaXRlckRlZmluZSIsInNldFNwZWNpZXMiLCJTSVpFIiwiX2YiLCJnZXRDb25zdHJ1Y3RvciIsIndyYXBwZXIiLCJJU19NQVAiLCJBRERFUiIsIkMiLCJfbCIsImRlbGV0ZSIsInByZXYiLCJmb3JFYWNoIiwiY2FsbGJhY2tmbiIsInNldFN0cm9uZyIsInJldCIsImdldEl0ZXJhdG9yTWV0aG9kIiwiJGl0ZXJEZXRlY3QiLCJpbmhlcml0SWZSZXF1aXJlZCIsImNvbW1vbiIsIklTX1dFQUsiLCJmaXhNZXRob2QiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIml0ZXIiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJmcm9tIiwic2tpcENsb3NpbmciLCJhcnIiLCJzZXRQcm90b3R5cGVPZiIsImNoZWNrIiwidGVzdCIsImJ1Z2d5IiwiX19wcm90b19fIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxFQUFBQyxHQUNBLG9CQUFBQyxTQUFBLGlC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QUEzWCxFQUFBMUQsR0FDRzBELG9CQ0xILElBQUFwRSxFQUFlekMsRUFBUSxHQUN2QitDLEVBQWUvQyxFQUFRLEdBQ3ZCeWUsRUFBQSxTQUFBdmIsRUFBQWlJLEdBRUEsR0FEQXBJLEVBQUFHLElBQ0FULEVBQUEwSSxJQUFBLE9BQUFBLEVBQUEsTUFBQXhJLFVBQUF3SSxFQUFBLDhCQUVBMUwsRUFBQUQsUUFBQSxDQUNBOFEsSUFBQTNQLE9BQUE2ZCxpQkFBQSxnQkFDQSxTQUFBRSxFQUFBQyxFQUFBck8sR0FDQSxLQUNBQSxFQUFjdFEsRUFBUSxHQUFSQSxDQUFnQnVDLFNBQUFuQyxLQUFpQkosRUFBUSxJQUFnQjhDLEVBQUFuQyxPQUFBa0IsVUFBQSxhQUFBeU8sSUFBQSxJQUN2RW9PLEVBQUEsSUFDQUMsSUFBQUQsYUFBQXRRLE9BQ08sTUFBQS9LLEdBQVlzYixHQUFBLEVBQ25CLGdCQUFBemIsRUFBQWlJLEdBSUEsT0FIQXNULEVBQUF2YixFQUFBaUksR0FDQXdULEVBQUF6YixFQUFBMGIsVUFBQXpULEVBQ0FtRixFQUFBcE4sRUFBQWlJLEdBQ0FqSSxHQVZBLENBWUssSUFBRyxRQUFBMkIsR0FDUjRaIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2Uge1xuXHRcdHZhciBhID0gZmFjdG9yeSgpO1xuXHRcdGZvcih2YXIgaSBpbiBhKSAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnID8gZXhwb3J0cyA6IHJvb3QpW2ldID0gYVtpXTtcblx0fVxufSkod2luZG93LCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNTMpO1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuMScgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE4IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS8sXG4gICAgICByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMVtMQVNUX0lOREVYXSAhPT0gMCB8fCByZTJbTEFTVF9JTkRFWF0gIT09IDA7XG59KSgpO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRDtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyByZS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIHJlZ2V4cEZsYWdzLmNhbGwocmUpKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmVbTEFTVF9JTkRFWF07XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChyZSwgc3RyKTtcblxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlW0xBU1RfSU5ERVhdID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUWVBFKSB7XG4gIGlmICghaXNPYmplY3QoaXQpIHx8IGl0Ll90ICE9PSBUWVBFKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2s7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzczsiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmaW5lUHJvcGVydHk7IiwiLy8g5a6e546wU3ltYm9sIFByb21pc2XnmoRwdWIvc3Vi55qE5LqL5Lu26amx5YqoXG4vLyBpbXBvcnQgJ0BiYWJlbC9wb2x5ZmlsbCc7XG52YXIgTWVzc2FnZUNlbnRyZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5tZXNzYWdlQXJyID0gbmV3IE1hcCgpO1xuICB0aGlzLnN1YiA9IGZ1bmN0aW9uIChuYW1lLCB7IGZuLCBjb250ZXh0LCBhcmdzIH0pIHtcbiAgICBsZXQgZmxleENvbnRleCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSlbMF1cbiAgICBmbGV4Q29udGV4Lm9uY2UgPSBmYWxzZVxuICAgIGxldCBmbkFyciA9IHRoaXMubWVzc2FnZUFyci5nZXQobmFtZSkgfHwgW107XG4gICAgZm5BcnIucHVzaChmbGV4Q29udGV4KVxuICAgIHRoaXMubWVzc2FnZUFyci5zZXQobmFtZSwgZm5BcnIpO1xuICB9XG4gIC8qKlxuICAgKuaJp+ihjOmpseWKqOS4reeahOaMh+WumuWHveaVsFxuICAgKi9cbiAgdGhpcy5wdWIgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIGxldCBmbkFyciA9IHRoaXMubWVzc2FnZUFyci5nZXQobmFtZSkgfHwgW107XG4gICAgbGV0IG5ld0ZuQXJyID0gZm5BcnIuZmlsdGVyKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgbGV0IGZuID0gaXRlbS5mbjsgbGV0IGNvbnRleHQgPSBpdGVtLmNvbnRleHQ7IGxldCBhcmdzID0gaXRlbS5hcmdzOyBsZXQgb25jZSA9IGl0ZW0ub25jZVxuICAgICAgZm4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICBpZiAoIW9uY2UpIHsgcmV0dXJuIGl0ZW0gfVxuICAgIH0pXG4gICAgdGhpcy5tZXNzYWdlQXJyLnNldChuYW1lLCBuZXdGbkFycik7XG4gIH1cbiAgLyoqXG4gICAq5Y+q5a2Y5YKo5LiA5qyh6amx5YqoIOS4gOasoeaAp+mpseWKqFxuICAgKi9cbiAgdGhpcy5zdWJPbmNlID0gZnVuY3Rpb24gKG5hbWUsIHsgZm4sIGNvbnRleHQsIGFyZ3MgfSkge1xuICAgIGxldCBmbGV4Q29udGV4ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVswXVxuICAgIGZsZXhDb250ZXgub25jZSA9IHRydWVcbiAgICBsZXQgZm5BcnIgPSB0aGlzLm1lc3NhZ2VBcnIuZ2V0KG5hbWUpIHx8IFtdO1xuICAgIGZuQXJyLnB1c2goZmxleENvbnRleCk7XG4gICAgdGhpcy5tZXNzYWdlQXJyLnNldChuYW1lLCBmbkFycik7XG4gIH1cbiAgLyoqXG4gICAq5riF56m65oyH5a6ac3ViXG4gICAqL1xuICB0aGlzLnJlbW92ZVN1YiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgbGV0IGZuQXJyID0gdGhpcy5tZXNzYWdlQXJyLmdldChuYW1lKSB8fCBbXTtcbiAgICBmbkFyciA9IFtdO1xuICAgIHRoaXMubWVzc2FnZUFyci5zZXQobmFtZSwgZm5BcnIpO1xuICB9XG5cbiAgdGhpcy5jbGVhck1lc3NhZ2VDZW50ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5tZXNzYWdlQXJyLmNsZWFyKCk7XG4gIH1cbiAgLyoqXG4gICAgICrojrflj5bms6jlhozkuK3lv4PkuK3lt7Lms6jlhoznmoTpqbHliqjlkI3np7BcbiAgICAgKi9cbiAgdGhpcy5nZXRNZXNzYWdlTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQga2V5ID0gdGhpcy5tZXNzYWdlQXJyLmtleXMoKTtcbiAgICBsZXQgbmFtZUFyciA9IFtdO1xuICAgIGZvciAobGV0IG5hbWUgb2Yga2V5KSB7XG4gICAgICBuYW1lQXJyLnB1c2gobmFtZSlcbiAgICB9O1xuICAgIHJldHVybiBuYW1lQXJyXG4gIH1cbn1cbmNsYXNzIFV0aWx0b29sIHtcbiAgc3RyID0gL1xccysvZzsgLy8g5Yik5pat5Li656m655qE5q2j5YiZ6KGo6L6+5byPXG4gIC8qKlxuICAgICAqIOWIpOaWreaYr+WQpuS4uuepuiDnqbrov5Tlm57kuLpmYWxzZe+8iOWOu+mZpOepuuagvO+8iVxuICAgICAqIEBwYXJhbSBkYXRhXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gIHN0YXRpYyBpc0VtcHR5IChkYXRhKSB7XG4gICAgaWYgKCFkYXRhIHx8IGRhdGEgPT09ICcnIHx8IGRhdGEgPT09IHVuZGVmaW5lZCB8fCBkYXRhID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgbGV0IGRhdGFzID0gZGF0YS5yZXBsYWNlKHRoaXMuc3RyLCAnJyk7XG4gICAgaWYgKGRhdGFzID09PSAnJykgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgTWVzc2FnZUNlbnRyZSwgVXRpbHRvb2xcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJmAnXXxcXGRcXGQ/fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJmAnXXxcXGRcXGQ/KS9nO1xuXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAocmVnZXhwLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IFN0cmluZyhyZXBsYWNlVmFsdWUpO1xuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG5cbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbiAgZnVuY3Rpb24gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICAgIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgICB9XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICAgIHZhciBjYXB0dXJlO1xuICAgICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBjaDtcbiAgICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gY2g7XG4gICAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgICByZXR1cm4gY2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICAgIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5yZXF1aXJlKCcuL19leHBvcnQnKSh7XG4gIHRhcmdldDogJ1JlZ0V4cCcsXG4gIHByb3RvOiB0cnVlLFxuICBmb3JjZWQ6IHJlZ2V4cEV4ZWMgIT09IC8uLy5leGVjXG59LCB7XG4gIGV4ZWM6IHJlZ2V4cEV4ZWNcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsInZhciAkaXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuIiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE1BUCA9ICdNYXAnO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShNQVAsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZiAoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSkgZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSykge1xuICB2YXIgQmFzZSA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIEMgPSBCYXNlO1xuICB2YXIgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnO1xuICB2YXIgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlO1xuICB2YXIgTyA9IHt9O1xuICB2YXIgZml4TWV0aG9kID0gZnVuY3Rpb24gKEtFWSkge1xuICAgIHZhciBmbiA9IHByb3RvW0tFWV07XG4gICAgcmVkZWZpbmUocHJvdG8sIEtFWSxcbiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQoYSkgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEsIGIpOyByZXR1cm4gdGhpczsgfVxuICAgICk7XG4gIH07XG4gIGlmICh0eXBlb2YgQyAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBwcm90by5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICAgIG1ldGEuTkVFRCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+ICBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IGluc3RhbmNlLmhhcygxKTsgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHsgbmV3IEMoaXRlcik7IH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0YXJnZXQsIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSgpLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xuICAgIH1cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBwcm90by5jbGVhcikgZGVsZXRlIHByb3RvLmNsZWFyO1xuICB9XG5cbiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XG5cbiAgT1tOQU1FXSA9IEM7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykge1xuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgdmFyIFA7XG4gIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==