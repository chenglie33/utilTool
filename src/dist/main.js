!function(t,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define([],r):"object"==typeof exports?exports.UtilTools=r():t.UtilTools=r()}(window,function(){return function(t){var r={};function n(e){if(r[e])return r[e].exports;var o=r[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=r,n.d=function(t,r,e){n.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:e})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,r){if(1&r&&(t=n(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(n.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var o in t)n.d(e,o,function(r){return t[r]}.bind(null,o));return e},n.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(r,"a",r),r},n.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},n.p="",n(n.s=61)}([function(t,r,n){var e=n(28)("wks"),o=n(17),i=n(1).Symbol,u="function"==typeof i;(t.exports=function(t){return e[t]||(e[t]=u&&i[t]||(u?i:o)("Symbol."+t))}).store=e},function(t,r){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,r,n){t.exports=n(77)},function(t,r,n){var e=n(4);t.exports=function(t){if(!e(t))throw TypeError(t+" is not an object!");return t}},function(t,r){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,r,n){var e=n(6),o=n(23);t.exports=n(7)?function(t,r,n){return e.f(t,r,o(1,n))}:function(t,r,n){return t[r]=n,t}},function(t,r,n){var e=n(3),o=n(43),i=n(30),u=Object.defineProperty;r.f=n(7)?Object.defineProperty:function(t,r,n){if(e(t),r=i(r,!0),e(n),o)try{return u(t,r,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[r]=n.value),t}},function(t,r,n){t.exports=!n(12)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,r,n){var e=n(1),o=n(5),i=n(9),u=n(17)("src"),c=Function.toString,a=(""+c).split("toString");n(11).inspectSource=function(t){return c.call(t)},(t.exports=function(t,r,n,c){var f="function"==typeof n;f&&(i(n,"name")||o(n,"name",r)),t[r]!==n&&(f&&(i(n,u)||o(n,u,t[r]?""+t[r]:a.join(String(r)))),t===e?t[r]=n:c?t[r]?t[r]=n:o(t,r,n):(delete t[r],o(t,r,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||c.call(this)})},function(t,r){var n={}.hasOwnProperty;t.exports=function(t,r){return n.call(t,r)}},function(t,r){function n(t,r,n,e,o,i,u){try{var c=t[i](u),a=c.value}catch(t){return void n(t)}c.done?r(a):Promise.resolve(a).then(e,o)}t.exports=function(t){return function(){var r=this,e=arguments;return new Promise(function(o,i){var u=t.apply(r,e);function c(t){n(u,o,i,c,a,"next",t)}function a(t){n(u,o,i,c,a,"throw",t)}c(void 0)})}}},function(t,r){var n=t.exports={version:"2.6.1"};"number"==typeof __e&&(__e=n)},function(t,r){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,r,n){var e=n(24);t.exports=function(t,r,n){if(e(t),void 0===r)return t;switch(n){case 1:return function(n){return t.call(r,n)};case 2:return function(n,e){return t.call(r,n,e)};case 3:return function(n,e,o){return t.call(r,n,e,o)}}return function(){return t.apply(r,arguments)}}},function(t,r,n){var e=n(71),o=n(21);t.exports=function(t){return e(o(t))}},function(t,r){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,r){t.exports=!1},function(t,r){var n=0,e=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+e).toString(36))}},function(t,r,n){var e=n(1),o=n(11),i=n(5),u=n(8),c=n(13),a=function(t,r,n){var f,s,l,p,v=t&a.F,h=t&a.G,y=t&a.S,g=t&a.P,d=t&a.B,m=h?e:y?e[r]||(e[r]={}):(e[r]||{}).prototype,x=h?o:o[r]||(o[r]={}),w=x.prototype||(x.prototype={});for(f in h&&(n=r),n)l=((s=!v&&m&&void 0!==m[f])?m:n)[f],p=d&&s?c(l,e):g&&"function"==typeof l?c(Function.call,l):l,m&&u(m,f,l,t&a.U),x[f]!=l&&i(x,f,p),g&&w[f]!=l&&(w[f]=l)};e.core=o,a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,r,n){var e=n(6).f,o=n(9),i=n(0)("toStringTag");t.exports=function(t,r,n){t&&!o(t=n?t:t.prototype,i)&&e(t,i,{configurable:!0,value:r})}},function(t,r){t.exports={}},function(t,r){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,r){var n=Math.ceil,e=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?e:n)(t)}},function(t,r){t.exports=function(t,r){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:r}}},function(t,r){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,r,n){var e=n(46),o=n(33);t.exports=Object.keys||function(t){return e(t,o)}},function(t,r,n){var e=n(22),o=Math.min;t.exports=function(t){return t>0?o(e(t),9007199254740991):0}},function(t,r,n){var e=n(15),o=n(0)("toStringTag"),i="Arguments"==e(function(){return arguments}());t.exports=function(t){var r,n,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,r){try{return t[r]}catch(t){}}(r=Object(t),o))?n:i?e(r):"Object"==(u=e(r))&&"function"==typeof r.callee?"Arguments":u}},function(t,r,n){var e=n(11),o=n(1),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,r){return i[t]||(i[t]=void 0!==r?r:{})})("versions",[]).push({version:e.version,mode:n(16)?"pure":"global",copyright:"Â© 2018 Denis Pushkarev (zloirock.ru)"})},function(t,r,n){var e=n(4),o=n(1).document,i=e(o)&&e(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,r,n){var e=n(4);t.exports=function(t,r){if(!e(t))return t;var n,o;if(r&&"function"==typeof(n=t.toString)&&!e(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!e(o=n.call(t)))return o;if(!r&&"function"==typeof(n=t.toString)&&!e(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,r,n){var e=n(17)("meta"),o=n(4),i=n(9),u=n(6).f,c=0,a=Object.isExtensible||function(){return!0},f=!n(12)(function(){return a(Object.preventExtensions({}))}),s=function(t){u(t,e,{value:{i:"O"+ ++c,w:{}}})},l=t.exports={KEY:e,NEED:!1,fastKey:function(t,r){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,e)){if(!a(t))return"F";if(!r)return"E";s(t)}return t[e].i},getWeak:function(t,r){if(!i(t,e)){if(!a(t))return!0;if(!r)return!1;s(t)}return t[e].w},onFreeze:function(t){return f&&l.NEED&&a(t)&&!i(t,e)&&s(t),t}}},function(t,r,n){var e=n(28)("keys"),o=n(17);t.exports=function(t){return e[t]||(e[t]=o(t))}},function(t,r){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,r){r.f={}.propertyIsEnumerable},function(t,r,n){var e=n(3),o=n(75),i=n(33),u=n(32)("IE_PROTO"),c=function(){},a=function(){var t,r=n(29)("iframe"),e=i.length;for(r.style.display="none",n(48).appendChild(r),r.src="javascript:",(t=r.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),a=t.F;e--;)delete a.prototype[i[e]];return a()};t.exports=Object.create||function(t,r){var n;return null!==t?(c.prototype=e(t),n=new c,c.prototype=null,n[u]=t):n=a(),void 0===r?n:o(n,r)}},function(t,r){t.exports=function(t,r,n,e){if(!(t instanceof r)||void 0!==e&&e in t)throw TypeError(n+": incorrect invocation!");return t}},function(t,r,n){var e=n(13),o=n(79),i=n(80),u=n(3),c=n(26),a=n(81),f={},s={};(r=t.exports=function(t,r,n,l,p){var v,h,y,g,d=p?function(){return t}:a(t),m=e(n,l,r?2:1),x=0;if("function"!=typeof d)throw TypeError(t+" is not iterable!");if(i(d)){for(v=c(t.length);v>x;x++)if((g=r?m(u(h=t[x])[0],h[1]):m(t[x]))===f||g===s)return g}else for(y=d.call(t);!(h=y.next()).done;)if((g=o(y,m,h.value,r))===f||g===s)return g}).BREAK=f,r.RETURN=s},function(t,r,n){var e=n(8);t.exports=function(t,r,n){for(var o in r)e(t,o,r[o],n);return t}},function(t,r,n){"use strict";var e=n(16),o=n(18),i=n(8),u=n(5),c=n(20),a=n(90),f=n(19),s=n(91),l=n(0)("iterator"),p=!([].keys&&"next"in[].keys()),v=function(){return this};t.exports=function(t,r,n,h,y,g,d){a(n,r,h);var m,x,w,b=function(t){if(!p&&t in S)return S[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},_=r+" Iterator",j="values"==y,O=!1,S=t.prototype,L=S[l]||S["@@iterator"]||y&&S[y],P=L||b(y),k=y?j?b("entries"):P:void 0,E="Array"==r&&S.entries||L;if(E&&(w=s(E.call(new t)))!==Object.prototype&&w.next&&(f(w,_,!0),e||"function"==typeof w[l]||u(w,l,v)),j&&L&&"values"!==L.name&&(O=!0,P=function(){return L.call(this)}),e&&!d||!p&&!O&&S[l]||u(S,l,P),c[r]=P,c[_]=v,y)if(m={values:j?P:b("values"),keys:g?P:b("keys"),entries:k},d)for(x in m)x in S||i(S,x,m[x]);else o(o.P+o.F*(p||O),r,m);return m}},function(t,r,n){var e=n(21);t.exports=function(t){return Object(e(t))}},function(t,r,n){var e=n(22),o=n(21);t.exports=function(t){return function(r,n){var i,u,c=String(o(r)),a=e(n),f=c.length;return a<0||a>=f?t?"":void 0:(i=c.charCodeAt(a))<55296||i>56319||a+1===f||(u=c.charCodeAt(a+1))<56320||u>57343?t?c.charAt(a):i:t?c.slice(a,a+2):u-56320+(i-55296<<10)+65536}}},function(t,r,n){"use strict";var e,o,i=n(67),u=RegExp.prototype.exec,c=String.prototype.replace,a=u,f=(e=/a/,o=/b*/g,u.call(e,"a"),u.call(o,"a"),0!==e.lastIndex||0!==o.lastIndex),s=void 0!==/()??/.exec("")[1];(f||s)&&(a=function(t){var r,n,e,o,a=this;return s&&(n=new RegExp("^"+a.source+"$(?!\\s)",i.call(a))),f&&(r=a.lastIndex),e=u.call(a,t),f&&e&&(a.lastIndex=a.global?e.index+e[0].length:r),s&&e&&e.length>1&&c.call(e[0],n,function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(e[o]=void 0)}),e}),t.exports=a},function(t,r,n){t.exports=!n(7)&&!n(12)(function(){return 7!=Object.defineProperty(n(29)("div"),"a",{get:function(){return 7}}).a})},function(t,r,n){var e=n(1),o=n(11),i=n(16),u=n(45),c=n(6).f;t.exports=function(t){var r=o.Symbol||(o.Symbol=i?{}:e.Symbol||{});"_"==t.charAt(0)||t in r||c(r,t,{value:u.f(t)})}},function(t,r,n){r.f=n(0)},function(t,r,n){var e=n(9),o=n(14),i=n(72)(!1),u=n(32)("IE_PROTO");t.exports=function(t,r){var n,c=o(t),a=0,f=[];for(n in c)n!=u&&e(c,n)&&f.push(n);for(;r.length>a;)e(c,n=r[a++])&&(~i(f,n)||f.push(n));return f}},function(t,r){r.f=Object.getOwnPropertySymbols},function(t,r,n){var e=n(1).document;t.exports=e&&e.documentElement},function(t,r,n){var e=n(46),o=n(33).concat("length","prototype");r.f=Object.getOwnPropertyNames||function(t){return e(t,o)}},function(t,r,n){var e=n(34),o=n(23),i=n(14),u=n(30),c=n(9),a=n(43),f=Object.getOwnPropertyDescriptor;r.f=n(7)?f:function(t,r){if(t=i(t),r=u(r,!0),a)try{return f(t,r)}catch(t){}if(c(t,r))return o(!e.f.call(t,r),t[r])}},function(t,r){!function(r){"use strict";var n,e=Object.prototype,o=e.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},u=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",a=i.toStringTag||"@@toStringTag",f="object"==typeof t,s=r.regeneratorRuntime;if(s)f&&(t.exports=s);else{(s=r.regeneratorRuntime=f?t.exports:{}).wrap=w;var l="suspendedStart",p="suspendedYield",v="executing",h="completed",y={},g={};g[u]=function(){return this};var d=Object.getPrototypeOf,m=d&&d(d(T([])));m&&m!==e&&o.call(m,u)&&(g=m);var x=O.prototype=_.prototype=Object.create(g);j.prototype=x.constructor=O,O.constructor=j,O[a]=j.displayName="GeneratorFunction",s.isGeneratorFunction=function(t){var r="function"==typeof t&&t.constructor;return!!r&&(r===j||"GeneratorFunction"===(r.displayName||r.name))},s.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,O):(t.__proto__=O,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(x),t},s.awrap=function(t){return{__await:t}},S(L.prototype),L.prototype[c]=function(){return this},s.AsyncIterator=L,s.async=function(t,r,n,e){var o=new L(w(t,r,n,e));return s.isGeneratorFunction(r)?o:o.next().then(function(t){return t.done?t.value:o.next()})},S(x),x[a]="Generator",x[u]=function(){return this},x.toString=function(){return"[object Generator]"},s.keys=function(t){var r=[];for(var n in t)r.push(n);return r.reverse(),function n(){for(;r.length;){var e=r.pop();if(e in t)return n.value=e,n.done=!1,n}return n.done=!0,n}},s.values=T,F.prototype={constructor:F,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(E),!t)for(var r in this)"t"===r.charAt(0)&&o.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function e(e,o){return c.type="throw",c.arg=t,r.next=e,o&&(r.method="next",r.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var u=this.tryEntries[i],c=u.completion;if("root"===u.tryLoc)return e("end");if(u.tryLoc<=this.prev){var a=o.call(u,"catchLoc"),f=o.call(u,"finallyLoc");if(a&&f){if(this.prev<u.catchLoc)return e(u.catchLoc,!0);if(this.prev<u.finallyLoc)return e(u.finallyLoc)}else if(a){if(this.prev<u.catchLoc)return e(u.catchLoc,!0)}else{if(!f)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return e(u.finallyLoc)}}}},abrupt:function(t,r){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc<=this.prev&&o.call(e,"finallyLoc")&&this.prev<e.finallyLoc){var i=e;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=r&&r<=i.finallyLoc&&(i=null);var u=i?i.completion:{};return u.type=t,u.arg=r,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(u)},complete:function(t,r){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&r&&(this.next=r),y},finish:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),E(n),y}},catch:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc===t){var e=n.completion;if("throw"===e.type){var o=e.arg;E(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,e){return this.delegate={iterator:T(t),resultName:r,nextLoc:e},"next"===this.method&&(this.arg=n),y}}}function w(t,r,n,e){var o=r&&r.prototype instanceof _?r:_,i=Object.create(o.prototype),u=new F(e||[]);return i._invoke=function(t,r,n){var e=l;return function(o,i){if(e===v)throw new Error("Generator is already running");if(e===h){if("throw"===o)throw i;return M()}for(n.method=o,n.arg=i;;){var u=n.delegate;if(u){var c=P(u,n);if(c){if(c===y)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(e===l)throw e=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);e=v;var a=b(t,r,n);if("normal"===a.type){if(e=n.done?h:p,a.arg===y)continue;return{value:a.arg,done:n.done}}"throw"===a.type&&(e=h,n.method="throw",n.arg=a.arg)}}}(t,n,u),i}function b(t,r,n){try{return{type:"normal",arg:t.call(r,n)}}catch(t){return{type:"throw",arg:t}}}function _(){}function j(){}function O(){}function S(t){["next","throw","return"].forEach(function(r){t[r]=function(t){return this._invoke(r,t)}})}function L(t){var r;this._invoke=function(n,e){function i(){return new Promise(function(r,i){!function r(n,e,i,u){var c=b(t[n],t,e);if("throw"!==c.type){var a=c.arg,f=a.value;return f&&"object"==typeof f&&o.call(f,"__await")?Promise.resolve(f.__await).then(function(t){r("next",t,i,u)},function(t){r("throw",t,i,u)}):Promise.resolve(f).then(function(t){a.value=t,i(a)},function(t){return r("throw",t,i,u)})}u(c.arg)}(n,e,r,i)})}return r=r?r.then(i,i):i()}}function P(t,r){var e=t.iterator[r.method];if(e===n){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=n,P(t,r),"throw"===r.method))return y;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var o=b(e,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,y;var i=o.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=n),r.delegate=null,y):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function k(t){var r={tryLoc:t[0]};1 in t&&(r.catchLoc=t[1]),2 in t&&(r.finallyLoc=t[2],r.afterLoc=t[3]),this.tryEntries.push(r)}function E(t){var r=t.completion||{};r.type="normal",delete r.arg,t.completion=r}function F(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(k,this),this.reset(!0)}function T(t){if(t){var r=t[u];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var e=-1,i=function r(){for(;++e<t.length;)if(o.call(t,e))return r.value=t[e],r.done=!1,r;return r.value=n,r.done=!0,r};return i.next=i}}return{next:M}}function M(){return{value:n,done:!0}}}(function(){return this||"object"==typeof self&&self}()||Function("return this")())},function(t,r,n){var e,o,i,u=n(13),c=n(83),a=n(48),f=n(29),s=n(1),l=s.process,p=s.setImmediate,v=s.clearImmediate,h=s.MessageChannel,y=s.Dispatch,g=0,d={},m=function(){var t=+this;if(d.hasOwnProperty(t)){var r=d[t];delete d[t],r()}},x=function(t){m.call(t.data)};p&&v||(p=function(t){for(var r=[],n=1;arguments.length>n;)r.push(arguments[n++]);return d[++g]=function(){c("function"==typeof t?t:Function(t),r)},e(g),g},v=function(t){delete d[t]},"process"==n(15)(l)?e=function(t){l.nextTick(u(m,t,1))}:y&&y.now?e=function(t){y.now(u(m,t,1))}:h?(i=(o=new h).port2,o.port1.onmessage=x,e=u(i.postMessage,i,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(e=function(t){s.postMessage(t+"","*")},s.addEventListener("message",x,!1)):e="onreadystatechange"in f("script")?function(t){a.appendChild(f("script")).onreadystatechange=function(){a.removeChild(this),m.call(t)}}:function(t){setTimeout(u(m,t,1),0)}),t.exports={set:p,clear:v}},function(t,r,n){"use strict";var e=n(24);function o(t){var r,n;this.promise=new t(function(t,e){if(void 0!==r||void 0!==n)throw TypeError("Bad Promise constructor");r=t,n=e}),this.resolve=e(r),this.reject=e(n)}t.exports.f=function(t){return new o(t)}},function(t,r,n){"use strict";var e=n(1),o=n(6),i=n(7),u=n(0)("species");t.exports=function(t){var r=e[t];i&&r&&!r[u]&&o.f(r,u,{configurable:!0,get:function(){return this}})}},function(t,r,n){var e=n(0)("iterator"),o=!1;try{var i=[7][e]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(t){}t.exports=function(t,r){if(!r&&!o)return!1;var n=!1;try{var i=[7],u=i[e]();u.next=function(){return{done:n=!0}},i[e]=function(){return u},t(i)}catch(t){}return n}},function(t,r,n){"use strict";var e=n(89),o=n(57),i=n(20),u=n(14);t.exports=n(39)(Array,"Array",function(t,r){this._t=u(t),this._i=0,this._k=r},function(){var t=this._t,r=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):o(0,"keys"==r?n:"values"==r?t[n]:[n,t[n]])},"values"),i.Arguments=i.Array,e("keys"),e("values"),e("entries")},function(t,r){t.exports=function(t,r){return{value:r,done:!!t}}},function(t,r,n){var e=n(4);t.exports=function(t,r){if(!e(t)||t._t!==r)throw TypeError("Incompatible receiver, "+r+" required!");return t}},function(t,r){t.exports=function(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}},function(t,r){function n(t,r){for(var n=0;n<r.length;n++){var e=r[n];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(t,e.key,e)}}t.exports=function(t,r,e){return r&&n(t.prototype,r),e&&n(t,e),t}},function(t,r,n){"use strict";n.r(r),n.d(r,"MessageCentre",function(){return l}),n.d(r,"Utiltool",function(){return p});n(62);var e=n(59),o=n.n(e),i=n(60),u=n.n(i),c=(n(68),n(69),n(2)),a=n.n(c),f=(n(78),n(51),n(10)),s=n.n(f),l=(n(88),n(56),n(92),n(93),function(){this.messageArr=new Map,this.globalMessage=new Map,this.sub=function(){var t=s()(a.a.mark(function t(r,n){var e,o,i=this,u=arguments;return a.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return n.fn,n.context,n.args,e=Array.prototype.slice.call(u,1)[0],t.next=4,new Promise(function(t,n){e.once=!1;var o=i.messageArr.get(r)||[];o.push(e),i.messageArr.set(r,o),t()});case 4:return o=t.sent,t.abrupt("return",o);case 6:case"end":return t.stop()}},t,this)}));return function(r,n){return t.apply(this,arguments)}}(),this.pub=function(){var t=s()(a.a.mark(function t(r){var n,e=this;return a.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,new Promise(function(t,n){var o=(e.messageArr.get(r)||[]).filter(function(t,r){var n=t.fn,e=t.context,o=t.args,i=t.once;if(n.apply(e,o),!i)return t});e.messageArr.set(r,o),t()});case 2:return n=t.sent,t.abrupt("return",n);case 4:case"end":return t.stop()}},t,this)}));return function(r){return t.apply(this,arguments)}}(),this.pubasync=function(){var t=s()(a.a.mark(function t(r){var n,e=this;return a.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return n=new Promise(function(t,n){var o=(e.messageArr.get(r)||[]).filter(function(t,r){var n=t.fn,e=t.context,o=t.args,i=t.once;if(n.apply(e,o),!i)return t});e.messageArr.set(r,o),t()}),t.abrupt("return",n);case 2:case"end":return t.stop()}},t,this)}));return function(r){return t.apply(this,arguments)}}(),this.subOnce=function(){var t=s()(a.a.mark(function t(r,n){var e,o,i=this,u=arguments;return a.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return n.fn,n.context,n.args,e=Array.prototype.slice.call(u,1)[0],t.next=4,new Promise(function(t,n){e.once=!0;var o=i.messageArr.get(r)||[];o.push(e),i.messageArr.set(r,o),t()});case 4:return o=t.sent,t.abrupt("return",o);case 6:case"end":return t.stop()}},t,this)}));return function(r,n){return t.apply(this,arguments)}}(),this.removeSub=function(){var t=s()(a.a.mark(function t(r){var n,e=this;return a.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,new Promise(function(t,n){var o=e.messageArr.get(r);o=[],e.messageArr.set(r,o),t()});case 2:return n=t.sent,t.abrupt("return",n);case 4:case"end":return t.stop()}},t,this)}));return function(r){return t.apply(this,arguments)}}(),this.clearMessageCenter=s()(a.a.mark(function t(){var r,n=this;return a.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,new Promise(function(t,r){n.messageArr.clear(),t()});case 2:return r=t.sent,t.abrupt("return",r);case 4:case"end":return t.stop()}},t,this)})),this.getMessageName=function(){var t=this.messageArr.keys(),r=[],n=!0,e=!1,o=void 0;try{for(var i,u=t[Symbol.iterator]();!(n=(i=u.next()).done);n=!0){var c=i.value;r.push(c)}}catch(t){e=!0,o=t}finally{try{n||null==u.return||u.return()}finally{if(e)throw o}}return r},this.setGlobal=function(t,r){var n=Symbol(t);return this.globalMessage.set(n,r),n},this.getGlobal=function(t){return this.globalMessage.get(t)||""}}),p=function(){function t(){o()(this,t)}return u()(t,null,[{key:"isEmpty",value:function(t){return!(!t||""===t||null==t)&&""!==t.replace(/\s+/g,"")}}]),t}()},function(t,r,n){"use strict";var e=n(3),o=n(40),i=n(26),u=n(22),c=n(63),a=n(64),f=Math.max,s=Math.min,l=Math.floor,p=/\$([$&`']|\d\d?|<[^>]*>)/g,v=/\$([$&`']|\d\d?)/g;n(65)("replace",2,function(t,r,n,h){return[function(e,o){var i=t(this),u=null==e?void 0:e[r];return void 0!==u?u.call(e,i,o):n.call(String(i),e,o)},function(t,r){var o=h(n,t,this,r);if(o.done)return o.value;var l=e(t),p=String(this),v="function"==typeof r;v||(r=String(r));var g=l.global;if(g){var d=l.unicode;l.lastIndex=0}for(var m=[];;){var x=a(l,p);if(null===x)break;if(m.push(x),!g)break;""===String(x[0])&&(l.lastIndex=c(p,i(l.lastIndex),d))}for(var w,b="",_=0,j=0;j<m.length;j++){x=m[j];for(var O=String(x[0]),S=f(s(u(x.index),p.length),0),L=[],P=1;P<x.length;P++)L.push(void 0===(w=x[P])?w:String(w));var k=x.groups;if(v){var E=[O].concat(L,S,p);void 0!==k&&E.push(k);var F=String(r.apply(void 0,E))}else F=y(O,p,S,L,k,r);S>=_&&(b+=p.slice(_,S)+F,_=S+O.length)}return b+p.slice(_)}];function y(t,r,e,i,u,c){var a=e+t.length,f=i.length,s=v;return void 0!==u&&(u=o(u),s=p),n.call(c,s,function(n,o){var c;switch(o.charAt(0)){case"$":return"$";case"&":return t;case"`":return r.slice(0,e);case"'":return r.slice(a);case"<":c=u[o.slice(1,-1)];break;default:var s=+o;if(0===s)return o;if(s>f){var p=l(s/10);return 0===p?o:p<=f?void 0===i[p-1]?o.charAt(1):i[p-1]+o.charAt(1):o}c=i[s-1]}return void 0===c?"":c})}})},function(t,r,n){"use strict";var e=n(41)(!0);t.exports=function(t,r,n){return r+(n?e(t,r).length:1)}},function(t,r,n){"use strict";var e=n(27),o=RegExp.prototype.exec;t.exports=function(t,r){var n=t.exec;if("function"==typeof n){var i=n.call(t,r);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==e(t))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(t,r)}},function(t,r,n){"use strict";n(66);var e=n(8),o=n(5),i=n(12),u=n(21),c=n(0),a=n(42),f=c("species"),s=!i(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),l=function(){var t=/(?:)/,r=t.exec;t.exec=function(){return r.apply(this,arguments)};var n="ab".split(t);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();t.exports=function(t,r,n){var p=c(t),v=!i(function(){var r={};return r[p]=function(){return 7},7!=""[t](r)}),h=v?!i(function(){var r=!1,n=/a/;return n.exec=function(){return r=!0,null},"split"===t&&(n.constructor={},n.constructor[f]=function(){return n}),n[p](""),!r}):void 0;if(!v||!h||"replace"===t&&!s||"split"===t&&!l){var y=/./[p],g=n(u,p,""[t],function(t,r,n,e,o){return r.exec===a?v&&!o?{done:!0,value:y.call(r,n,e)}:{done:!0,value:t.call(n,r,e)}:{done:!1}}),d=g[0],m=g[1];e(String.prototype,t,d),o(RegExp.prototype,p,2==r?function(t,r){return m.call(t,this,r)}:function(t){return m.call(t,this)})}}},function(t,r,n){"use strict";var e=n(42);n(18)({target:"RegExp",proto:!0,forced:e!==/./.exec},{exec:e})},function(t,r,n){"use strict";var e=n(3);t.exports=function(){var t=e(this),r="";return t.global&&(r+="g"),t.ignoreCase&&(r+="i"),t.multiline&&(r+="m"),t.unicode&&(r+="u"),t.sticky&&(r+="y"),r}},function(t,r,n){n(44)("asyncIterator")},function(t,r,n){"use strict";var e=n(1),o=n(9),i=n(7),u=n(18),c=n(8),a=n(31).KEY,f=n(12),s=n(28),l=n(19),p=n(17),v=n(0),h=n(45),y=n(44),g=n(70),d=n(74),m=n(3),x=n(4),w=n(14),b=n(30),_=n(23),j=n(35),O=n(76),S=n(50),L=n(6),P=n(25),k=S.f,E=L.f,F=O.f,T=e.Symbol,M=e.JSON,N=M&&M.stringify,z=v("_hidden"),J=v("toPrimitive"),A={}.propertyIsEnumerable,G=s("symbol-registry"),Q=s("symbols"),V=s("op-symbols"),q=Object.prototype,U="function"==typeof T,X=e.QObject,$=!X||!X.prototype||!X.prototype.findChild,K=i&&f(function(){return 7!=j(E({},"a",{get:function(){return E(this,"a",{value:7}).a}})).a})?function(t,r,n){var e=k(q,r);e&&delete q[r],E(t,r,n),e&&t!==q&&E(q,r,e)}:E,W=function(t){var r=Q[t]=j(T.prototype);return r._k=t,r},Y=U&&"symbol"==typeof T.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof T},D=function(t,r,n){return t===q&&D(V,r,n),m(t),r=b(r,!0),m(n),o(Q,r)?(n.enumerable?(o(t,z)&&t[z][r]&&(t[z][r]=!1),n=j(n,{enumerable:_(0,!1)})):(o(t,z)||E(t,z,_(1,{})),t[z][r]=!0),K(t,r,n)):E(t,r,n)},R=function(t,r){m(t);for(var n,e=g(r=w(r)),o=0,i=e.length;i>o;)D(t,n=e[o++],r[n]);return t},Z=function(t){var r=A.call(this,t=b(t,!0));return!(this===q&&o(Q,t)&&!o(V,t))&&(!(r||!o(this,t)||!o(Q,t)||o(this,z)&&this[z][t])||r)},H=function(t,r){if(t=w(t),r=b(r,!0),t!==q||!o(Q,r)||o(V,r)){var n=k(t,r);return!n||!o(Q,r)||o(t,z)&&t[z][r]||(n.enumerable=!0),n}},C=function(t){for(var r,n=F(w(t)),e=[],i=0;n.length>i;)o(Q,r=n[i++])||r==z||r==a||e.push(r);return e},B=function(t){for(var r,n=t===q,e=F(n?V:w(t)),i=[],u=0;e.length>u;)!o(Q,r=e[u++])||n&&!o(q,r)||i.push(Q[r]);return i};U||(c((T=function(){if(this instanceof T)throw TypeError("Symbol is not a constructor!");var t=p(arguments.length>0?arguments[0]:void 0),r=function(n){this===q&&r.call(V,n),o(this,z)&&o(this[z],t)&&(this[z][t]=!1),K(this,t,_(1,n))};return i&&$&&K(q,t,{configurable:!0,set:r}),W(t)}).prototype,"toString",function(){return this._k}),S.f=H,L.f=D,n(49).f=O.f=C,n(34).f=Z,n(47).f=B,i&&!n(16)&&c(q,"propertyIsEnumerable",Z,!0),h.f=function(t){return W(v(t))}),u(u.G+u.W+u.F*!U,{Symbol:T});for(var I="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;I.length>tt;)v(I[tt++]);for(var rt=P(v.store),nt=0;rt.length>nt;)y(rt[nt++]);u(u.S+u.F*!U,"Symbol",{for:function(t){return o(G,t+="")?G[t]:G[t]=T(t)},keyFor:function(t){if(!Y(t))throw TypeError(t+" is not a symbol!");for(var r in G)if(G[r]===t)return r},useSetter:function(){$=!0},useSimple:function(){$=!1}}),u(u.S+u.F*!U,"Object",{create:function(t,r){return void 0===r?j(t):R(j(t),r)},defineProperty:D,defineProperties:R,getOwnPropertyDescriptor:H,getOwnPropertyNames:C,getOwnPropertySymbols:B}),M&&u(u.S+u.F*(!U||f(function(){var t=T();return"[null]"!=N([t])||"{}"!=N({a:t})||"{}"!=N(Object(t))})),"JSON",{stringify:function(t){for(var r,n,e=[t],o=1;arguments.length>o;)e.push(arguments[o++]);if(n=r=e[1],(x(r)||void 0!==t)&&!Y(t))return d(r)||(r=function(t,r){if("function"==typeof n&&(r=n.call(this,t,r)),!Y(r))return r}),e[1]=r,N.apply(M,e)}}),T.prototype[J]||n(5)(T.prototype,J,T.prototype.valueOf),l(T,"Symbol"),l(Math,"Math",!0),l(e.JSON,"JSON",!0)},function(t,r,n){var e=n(25),o=n(47),i=n(34);t.exports=function(t){var r=e(t),n=o.f;if(n)for(var u,c=n(t),a=i.f,f=0;c.length>f;)a.call(t,u=c[f++])&&r.push(u);return r}},function(t,r,n){var e=n(15);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==e(t)?t.split(""):Object(t)}},function(t,r,n){var e=n(14),o=n(26),i=n(73);t.exports=function(t){return function(r,n,u){var c,a=e(r),f=o(a.length),s=i(u,f);if(t&&n!=n){for(;f>s;)if((c=a[s++])!=c)return!0}else for(;f>s;s++)if((t||s in a)&&a[s]===n)return t||s||0;return!t&&-1}}},function(t,r,n){var e=n(22),o=Math.max,i=Math.min;t.exports=function(t,r){return(t=e(t))<0?o(t+r,0):i(t,r)}},function(t,r,n){var e=n(15);t.exports=Array.isArray||function(t){return"Array"==e(t)}},function(t,r,n){var e=n(6),o=n(3),i=n(25);t.exports=n(7)?Object.defineProperties:function(t,r){o(t);for(var n,u=i(r),c=u.length,a=0;c>a;)e.f(t,n=u[a++],r[n]);return t}},function(t,r,n){var e=n(14),o=n(49).f,i={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return u.slice()}}(t):o(e(t))}},function(t,r,n){var e=function(){return this||"object"==typeof self&&self}()||Function("return this")(),o=e.regeneratorRuntime&&Object.getOwnPropertyNames(e).indexOf("regeneratorRuntime")>=0,i=o&&e.regeneratorRuntime;if(e.regeneratorRuntime=void 0,t.exports=n(51),o)e.regeneratorRuntime=i;else try{delete e.regeneratorRuntime}catch(t){e.regeneratorRuntime=void 0}},function(t,r,n){"use strict";var e,o,i,u,c=n(16),a=n(1),f=n(13),s=n(27),l=n(18),p=n(4),v=n(24),h=n(36),y=n(37),g=n(82),d=n(52).set,m=n(84)(),x=n(53),w=n(85),b=n(86),_=n(87),j=a.TypeError,O=a.process,S=O&&O.versions,L=S&&S.v8||"",P=a.Promise,k="process"==s(O),E=function(){},F=o=x.f,T=!!function(){try{var t=P.resolve(1),r=(t.constructor={})[n(0)("species")]=function(t){t(E,E)};return(k||"function"==typeof PromiseRejectionEvent)&&t.then(E)instanceof r&&0!==L.indexOf("6.6")&&-1===b.indexOf("Chrome/66")}catch(t){}}(),M=function(t){var r;return!(!p(t)||"function"!=typeof(r=t.then))&&r},N=function(t,r){if(!t._n){t._n=!0;var n=t._c;m(function(){for(var e=t._v,o=1==t._s,i=0,u=function(r){var n,i,u,c=o?r.ok:r.fail,a=r.resolve,f=r.reject,s=r.domain;try{c?(o||(2==t._h&&A(t),t._h=1),!0===c?n=e:(s&&s.enter(),n=c(e),s&&(s.exit(),u=!0)),n===r.promise?f(j("Promise-chain cycle")):(i=M(n))?i.call(n,a,f):a(n)):f(e)}catch(t){s&&!u&&s.exit(),f(t)}};n.length>i;)u(n[i++]);t._c=[],t._n=!1,r&&!t._h&&z(t)})}},z=function(t){d.call(a,function(){var r,n,e,o=t._v,i=J(t);if(i&&(r=w(function(){k?O.emit("unhandledRejection",o,t):(n=a.onunhandledrejection)?n({promise:t,reason:o}):(e=a.console)&&e.error&&e.error("Unhandled promise rejection",o)}),t._h=k||J(t)?2:1),t._a=void 0,i&&r.e)throw r.v})},J=function(t){return 1!==t._h&&0===(t._a||t._c).length},A=function(t){d.call(a,function(){var r;k?O.emit("rejectionHandled",t):(r=a.onrejectionhandled)&&r({promise:t,reason:t._v})})},G=function(t){var r=this;r._d||(r._d=!0,(r=r._w||r)._v=t,r._s=2,r._a||(r._a=r._c.slice()),N(r,!0))},Q=function(t){var r,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw j("Promise can't be resolved itself");(r=M(t))?m(function(){var e={_w:n,_d:!1};try{r.call(t,f(Q,e,1),f(G,e,1))}catch(t){G.call(e,t)}}):(n._v=t,n._s=1,N(n,!1))}catch(t){G.call({_w:n,_d:!1},t)}}};T||(P=function(t){h(this,P,"Promise","_h"),v(t),e.call(this);try{t(f(Q,this,1),f(G,this,1))}catch(t){G.call(this,t)}},(e=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(38)(P.prototype,{then:function(t,r){var n=F(g(this,P));return n.ok="function"!=typeof t||t,n.fail="function"==typeof r&&r,n.domain=k?O.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&N(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new e;this.promise=t,this.resolve=f(Q,t,1),this.reject=f(G,t,1)},x.f=F=function(t){return t===P||t===u?new i(t):o(t)}),l(l.G+l.W+l.F*!T,{Promise:P}),n(19)(P,"Promise"),n(54)("Promise"),u=n(11).Promise,l(l.S+l.F*!T,"Promise",{reject:function(t){var r=F(this);return(0,r.reject)(t),r.promise}}),l(l.S+l.F*(c||!T),"Promise",{resolve:function(t){return _(c&&this===u?P:this,t)}}),l(l.S+l.F*!(T&&n(55)(function(t){P.all(t).catch(E)})),"Promise",{all:function(t){var r=this,n=F(r),e=n.resolve,o=n.reject,i=w(function(){var n=[],i=0,u=1;y(t,!1,function(t){var c=i++,a=!1;n.push(void 0),u++,r.resolve(t).then(function(t){a||(a=!0,n[c]=t,--u||e(n))},o)}),--u||e(n)});return i.e&&o(i.v),n.promise},race:function(t){var r=this,n=F(r),e=n.reject,o=w(function(){y(t,!1,function(t){r.resolve(t).then(n.resolve,e)})});return o.e&&e(o.v),n.promise}})},function(t,r,n){var e=n(3);t.exports=function(t,r,n,o){try{return o?r(e(n)[0],n[1]):r(n)}catch(r){var i=t.return;throw void 0!==i&&e(i.call(t)),r}}},function(t,r,n){var e=n(20),o=n(0)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(e.Array===t||i[o]===t)}},function(t,r,n){var e=n(27),o=n(0)("iterator"),i=n(20);t.exports=n(11).getIteratorMethod=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[e(t)]}},function(t,r,n){var e=n(3),o=n(24),i=n(0)("species");t.exports=function(t,r){var n,u=e(t).constructor;return void 0===u||null==(n=e(u)[i])?r:o(n)}},function(t,r){t.exports=function(t,r,n){var e=void 0===n;switch(r.length){case 0:return e?t():t.call(n);case 1:return e?t(r[0]):t.call(n,r[0]);case 2:return e?t(r[0],r[1]):t.call(n,r[0],r[1]);case 3:return e?t(r[0],r[1],r[2]):t.call(n,r[0],r[1],r[2]);case 4:return e?t(r[0],r[1],r[2],r[3]):t.call(n,r[0],r[1],r[2],r[3])}return t.apply(n,r)}},function(t,r,n){var e=n(1),o=n(52).set,i=e.MutationObserver||e.WebKitMutationObserver,u=e.process,c=e.Promise,a="process"==n(15)(u);t.exports=function(){var t,r,n,f=function(){var e,o;for(a&&(e=u.domain)&&e.exit();t;){o=t.fn,t=t.next;try{o()}catch(e){throw t?n():r=void 0,e}}r=void 0,e&&e.enter()};if(a)n=function(){u.nextTick(f)};else if(!i||e.navigator&&e.navigator.standalone)if(c&&c.resolve){var s=c.resolve(void 0);n=function(){s.then(f)}}else n=function(){o.call(e,f)};else{var l=!0,p=document.createTextNode("");new i(f).observe(p,{characterData:!0}),n=function(){p.data=l=!l}}return function(e){var o={fn:e,next:void 0};r&&(r.next=o),t||(t=o,n()),r=o}}},function(t,r){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,r,n){var e=n(1).navigator;t.exports=e&&e.userAgent||""},function(t,r,n){var e=n(3),o=n(4),i=n(53);t.exports=function(t,r){if(e(t),o(r)&&r.constructor===t)return r;var n=i.f(t);return(0,n.resolve)(r),n.promise}},function(t,r,n){for(var e=n(56),o=n(25),i=n(8),u=n(1),c=n(5),a=n(20),f=n(0),s=f("iterator"),l=f("toStringTag"),p=a.Array,v={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(v),y=0;y<h.length;y++){var g,d=h[y],m=v[d],x=u[d],w=x&&x.prototype;if(w&&(w[s]||c(w,s,p),w[l]||c(w,l,d),a[d]=p,m))for(g in e)w[g]||i(w,g,e[g],!0)}},function(t,r,n){var e=n(0)("unscopables"),o=Array.prototype;null==o[e]&&n(5)(o,e,{}),t.exports=function(t){o[e][t]=!0}},function(t,r,n){"use strict";var e=n(35),o=n(23),i=n(19),u={};n(5)(u,n(0)("iterator"),function(){return this}),t.exports=function(t,r,n){t.prototype=e(u,{next:o(1,n)}),i(t,r+" Iterator")}},function(t,r,n){var e=n(9),o=n(40),i=n(32)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),e(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,r,n){"use strict";var e=n(41)(!0);n(39)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,r=this._t,n=this._i;return n>=r.length?{value:void 0,done:!0}:(t=e(r,n),this._i+=t.length,{value:t,done:!1})})},function(t,r,n){"use strict";var e=n(94),o=n(58);t.exports=n(95)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var r=e.getEntry(o(this,"Map"),t);return r&&r.v},set:function(t,r){return e.def(o(this,"Map"),0===t?0:t,r)}},e,!0)},function(t,r,n){"use strict";var e=n(6).f,o=n(35),i=n(38),u=n(13),c=n(36),a=n(37),f=n(39),s=n(57),l=n(54),p=n(7),v=n(31).fastKey,h=n(58),y=p?"_s":"size",g=function(t,r){var n,e=v(r);if("F"!==e)return t._i[e];for(n=t._f;n;n=n.n)if(n.k==r)return n};t.exports={getConstructor:function(t,r,n,f){var s=t(function(t,e){c(t,s,r,"_i"),t._t=r,t._i=o(null),t._f=void 0,t._l=void 0,t[y]=0,null!=e&&a(e,n,t[f],t)});return i(s.prototype,{clear:function(){for(var t=h(this,r),n=t._i,e=t._f;e;e=e.n)e.r=!0,e.p&&(e.p=e.p.n=void 0),delete n[e.i];t._f=t._l=void 0,t[y]=0},delete:function(t){var n=h(this,r),e=g(n,t);if(e){var o=e.n,i=e.p;delete n._i[e.i],e.r=!0,i&&(i.n=o),o&&(o.p=i),n._f==e&&(n._f=o),n._l==e&&(n._l=i),n[y]--}return!!e},forEach:function(t){h(this,r);for(var n,e=u(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(e(n.v,n.k,this);n&&n.r;)n=n.p},has:function(t){return!!g(h(this,r),t)}}),p&&e(s.prototype,"size",{get:function(){return h(this,r)[y]}}),s},def:function(t,r,n){var e,o,i=g(t,r);return i?i.v=n:(t._l=i={i:o=v(r,!0),k:r,v:n,p:e=t._l,n:void 0,r:!1},t._f||(t._f=i),e&&(e.n=i),t[y]++,"F"!==o&&(t._i[o]=i)),t},getEntry:g,setStrong:function(t,r,n){f(t,r,function(t,n){this._t=h(t,r),this._k=n,this._l=void 0},function(){for(var t=this._k,r=this._l;r&&r.r;)r=r.p;return this._t&&(this._l=r=r?r.n:this._t._f)?s(0,"keys"==t?r.k:"values"==t?r.v:[r.k,r.v]):(this._t=void 0,s(1))},n?"entries":"values",!n,!0),l(r)}}},function(t,r,n){"use strict";var e=n(1),o=n(18),i=n(8),u=n(38),c=n(31),a=n(37),f=n(36),s=n(4),l=n(12),p=n(55),v=n(19),h=n(96);t.exports=function(t,r,n,y,g,d){var m=e[t],x=m,w=g?"set":"add",b=x&&x.prototype,_={},j=function(t){var r=b[t];i(b,t,"delete"==t?function(t){return!(d&&!s(t))&&r.call(this,0===t?0:t)}:"has"==t?function(t){return!(d&&!s(t))&&r.call(this,0===t?0:t)}:"get"==t?function(t){return d&&!s(t)?void 0:r.call(this,0===t?0:t)}:"add"==t?function(t){return r.call(this,0===t?0:t),this}:function(t,n){return r.call(this,0===t?0:t,n),this})};if("function"==typeof x&&(d||b.forEach&&!l(function(){(new x).entries().next()}))){var O=new x,S=O[w](d?{}:-0,1)!=O,L=l(function(){O.has(1)}),P=p(function(t){new x(t)}),k=!d&&l(function(){for(var t=new x,r=5;r--;)t[w](r,r);return!t.has(-0)});P||((x=r(function(r,n){f(r,x,t);var e=h(new m,r,x);return null!=n&&a(n,g,e[w],e),e})).prototype=b,b.constructor=x),(L||k)&&(j("delete"),j("has"),g&&j("get")),(k||S)&&j(w),d&&b.clear&&delete b.clear}else x=y.getConstructor(r,t,g,w),u(x.prototype,n),c.NEED=!0;return v(x,t),_[t]=x,o(o.G+o.W+o.F*(x!=m),_),d||y.setStrong(x,t,g),x}},function(t,r,n){var e=n(4),o=n(97).set;t.exports=function(t,r,n){var i,u=r.constructor;return u!==n&&"function"==typeof u&&(i=u.prototype)!==n.prototype&&e(i)&&o&&o(t,i),t}},function(t,r,n){var e=n(4),o=n(3),i=function(t,r){if(o(t),!e(r)&&null!==r)throw TypeError(r+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,r,e){try{(e=n(13)(Function.call,n(50).f(Object.prototype,"__proto__").set,2))(t,[]),r=!(t instanceof Array)}catch(t){r=!0}return function(t,n){return i(t,n),r?t.__proto__=n:e(t,n),t}}({},!1):void 0),check:i}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9VdGlsVG9vbHMvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL1V0aWxUb29scy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yLmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1leHQuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Rhc2suanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdmFsaWRhdGUtY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYy5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUtbW9kdWxlLmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbnZva2UuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWljcm90YXNrLmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vVXRpbFRvb2xzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9VdGlsVG9vbHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovL1V0aWxUb29scy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1wcm90by5qcyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJ3aW5kb3ciLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwic3RvcmUiLCJ1aWQiLCJVU0VfU1lNQk9MIiwiZ2xvYmFsIiwiTWF0aCIsInNlbGYiLCJGdW5jdGlvbiIsIl9fZyIsImlzT2JqZWN0IiwiaXQiLCJUeXBlRXJyb3IiLCJkUCIsImNyZWF0ZURlc2MiLCJmIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiTyIsIlAiLCJBdHRyaWJ1dGVzIiwiZSIsImEiLCJoaWRlIiwiaGFzIiwiU1JDIiwiJHRvU3RyaW5nIiwiVFBMIiwic3BsaXQiLCJpbnNwZWN0U291cmNlIiwidmFsIiwic2FmZSIsImlzRnVuY3Rpb24iLCJqb2luIiwiU3RyaW5nIiwidGhpcyIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsInJlc29sdmUiLCJyZWplY3QiLCJfbmV4dCIsIl90aHJvdyIsImFyZyIsImluZm8iLCJlcnJvciIsImRvbmUiLCJQcm9taXNlIiwidGhlbiIsImZuIiwiYXJncyIsImFyZ3VtZW50cyIsImFwcGx5IiwiZXJyIiwidW5kZWZpbmVkIiwiY29yZSIsInZlcnNpb24iLCJfX2UiLCJleGVjIiwiYUZ1bmN0aW9uIiwidGhhdCIsImxlbmd0aCIsImIiLCJJT2JqZWN0IiwiZGVmaW5lZCIsInRvU3RyaW5nIiwic2xpY2UiLCJpZCIsInB4IiwicmFuZG9tIiwiY29uY2F0IiwicmVkZWZpbmUiLCJjdHgiLCIkZXhwb3J0IiwidHlwZSIsInNvdXJjZSIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiSVNfQklORCIsIkIiLCJ0YXJnZXQiLCJleHBQcm90byIsIlUiLCJXIiwiUiIsImRlZiIsIlRBRyIsInRhZyIsInN0YXQiLCJjb25maWd1cmFibGUiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsImJpdG1hcCIsIndyaXRhYmxlIiwiJGtleXMiLCJlbnVtQnVnS2V5cyIsImtleXMiLCJ0b0ludGVnZXIiLCJtaW4iLCJjb2YiLCJBUkciLCJUIiwidHJ5R2V0IiwiY2FsbGVlIiwicHVzaCIsImNvcHlyaWdodCIsImRvY3VtZW50IiwiaXMiLCJjcmVhdGVFbGVtZW50IiwidmFsdWVPZiIsIk1FVEEiLCJzZXREZXNjIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwidyIsIm1ldGEiLCJLRVkiLCJORUVEIiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsInNoYXJlZCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiZFBzIiwiSUVfUFJPVE8iLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwic3JjIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJ3cml0ZSIsImx0IiwiY2xvc2UiLCJQcm9wZXJ0aWVzIiwicmVzdWx0IiwiQ29uc3RydWN0b3IiLCJmb3JiaWRkZW5GaWVsZCIsImlzQXJyYXlJdGVyIiwidG9MZW5ndGgiLCJnZXRJdGVyRm4iLCJCUkVBSyIsIlJFVFVSTiIsIml0ZXJhYmxlIiwiZW50cmllcyIsIklURVJBVE9SIiwic3RlcCIsIml0ZXJhdG9yIiwiaXRlckZuIiwiaW5kZXgiLCJuZXh0IiwiTElCUkFSWSIsIkl0ZXJhdG9ycyIsIiRpdGVyQ3JlYXRlIiwic2V0VG9TdHJpbmdUYWciLCJnZXRQcm90b3R5cGVPZiIsIkJVR0dZIiwicmV0dXJuVGhpcyIsIkJhc2UiLCJOQU1FIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIm1ldGhvZHMiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldE1ldGhvZCIsImtpbmQiLCJwcm90byIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwidmFsdWVzIiwiVE9fU1RSSU5HIiwicG9zIiwiY2hhckNvZGVBdCIsImNoYXJBdCIsInJlMSIsInJlMiIsInJlZ2V4cEZsYWdzIiwibmF0aXZlRXhlYyIsIlJlZ0V4cCIsIm5hdGl2ZVJlcGxhY2UiLCJyZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJOUENHX0lOQ0xVREVEIiwic3RyIiwibGFzdEluZGV4IiwicmVDb3B5IiwibWF0Y2giLCJyZSIsIndrc0V4dCIsIiRTeW1ib2wiLCJ0b0lPYmplY3QiLCJhcnJheUluZGV4T2YiLCJuYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImRvY3VtZW50RWxlbWVudCIsImhpZGRlbktleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwicElFIiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIk9wIiwiaGFzT3duIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwiaW5Nb2R1bGUiLCJydW50aW1lIiwicmVnZW5lcmF0b3JSdW50aW1lIiwid3JhcCIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsIkNvbnRpbnVlU2VudGluZWwiLCJnZXRQcm90byIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkdlbmVyYXRvciIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJfX2F3YWl0IiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsImFzeW5jIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsIml0ZXIiLCJyZXZlcnNlIiwicG9wIiwiQ29udGV4dCIsInJlc2V0Iiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJzZW50IiwiX3NlbnQiLCJkZWxlZ2F0ZSIsIm1ldGhvZCIsInRyeUVudHJpZXMiLCJmb3JFYWNoIiwicmVzZXRUcnlFbnRyeSIsInN0b3AiLCJyb290UmVjb3JkIiwiY29tcGxldGlvbiIsInJ2YWwiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImV4Y2VwdGlvbiIsImNvbnRleHQiLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJyZWNvcmQiLCJlbnRyeSIsInRyeUxvYyIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsIkVycm9yIiwiYWJydXB0IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJhZnRlckxvYyIsImZpbmlzaCIsImNhdGNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHJvdG9HZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJfaW52b2tlIiwic3RhdGUiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwidHJ5Q2F0Y2giLCJtYWtlSW52b2tlTWV0aG9kIiwib2JqIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbnZva2UiLCJ1bndyYXBwZWQiLCJyZXR1cm4iLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiaXRlcmF0b3JNZXRob2QiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiaHRtbCIsImNlbCIsInByb2Nlc3MiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwicnVuIiwibGlzdGVuZXIiLCJldmVudCIsImRhdGEiLCJuZXh0VGljayIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRTY3JpcHRzIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0Iiwic2V0IiwiY2xlYXIiLCJQcm9taXNlQ2FwYWJpbGl0eSIsIkMiLCJwcm9taXNlIiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJERVNDUklQVE9SUyIsIlNQRUNJRVMiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsIkFycmF5IiwiZnJvbSIsInNraXBDbG9zaW5nIiwiYXJyIiwiYWRkVG9VbnNjb3BhYmxlcyIsIml0ZXJhdGVkIiwiX3QiLCJfaSIsIl9rIiwiQXJndW1lbnRzIiwiVFlQRSIsImluc3RhbmNlIiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJNZXNzYWdlQ2VudHJlIiwibWVzc2FnZUFyciIsIk1hcCIsImdsb2JhbE1lc3NhZ2UiLCJzdWIiLCJfcmVmIiwiX2JhYmVsX3J1bnRpbWVfaGVscGVyc19hc3luY1RvR2VuZXJhdG9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X19fZGVmYXVsdCIsIl9iYWJlbF9ydW50aW1lX3JlZ2VuZXJhdG9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19fZGVmYXVsdCIsIl9jYWxsZWUiLCJfcmVmMiIsImZsZXhDb250ZXgiLCJfdGhpcyIsIl9hcmdzIiwiX2NvbnRleHQiLCJvbmNlIiwiZm5BcnIiLCJfeCIsIl94MiIsInB1YiIsIl9yZWYzIiwiX2NhbGxlZTIiLCJfdGhpczIiLCJfY29udGV4dDIiLCJuZXdGbkFyciIsImZpbHRlciIsIml0ZW0iLCJfeDMiLCJwdWJhc3luYyIsIl9yZWY0IiwiX2NhbGxlZTMiLCJfdGhpczMiLCJfY29udGV4dDMiLCJfeDQiLCJzdWJPbmNlIiwiX3JlZjUiLCJfY2FsbGVlNCIsIl9yZWY2IiwiX3RoaXM0IiwiX2FyZ3M0IiwiX2NvbnRleHQ0IiwiX3g1IiwiX3g2IiwicmVtb3ZlU3ViIiwiX3JlZjciLCJfY2FsbGVlNSIsIl90aGlzNSIsIl9jb250ZXh0NSIsIl94NyIsImNsZWFyTWVzc2FnZUNlbnRlciIsIl9jYWxsZWU2IiwiX3RoaXM2IiwiX2NvbnRleHQ2IiwiZ2V0TWVzc2FnZU5hbWUiLCJuYW1lQXJyIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiIsIl9kaWRJdGVyYXRvckVycm9yIiwiX2l0ZXJhdG9yRXJyb3IiLCJfc3RlcCIsIl9pdGVyYXRvciIsInNldEdsb2JhbCIsInNuYW1lIiwiZ2V0R2xvYmFsIiwiVXRpbHRvb2wiLCJ0b09iamVjdCIsImFkdmFuY2VTdHJpbmdJbmRleCIsInJlZ0V4cEV4ZWMiLCJtYXgiLCJTVUJTVElUVVRJT05fU1lNQk9MUyIsIlNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEIiwiUkVQTEFDRSIsIiRyZXBsYWNlIiwibWF5YmVDYWxsTmF0aXZlIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJyZWdleHAiLCJyZXMiLCJyeCIsImZ1bmN0aW9uYWxSZXBsYWNlIiwiZnVsbFVuaWNvZGUiLCJ1bmljb2RlIiwicmVzdWx0cyIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwibWF0Y2hlZCIsInBvc2l0aW9uIiwiY2FwdHVyZXMiLCJqIiwibmFtZWRDYXB0dXJlcyIsImdyb3VwcyIsInJlcGxhY2VyQXJncyIsInJlcGxhY2VtZW50IiwiZ2V0U3Vic3RpdHV0aW9uIiwidGFpbFBvcyIsInN5bWJvbHMiLCJjaCIsImNhcHR1cmUiLCJhdCIsImNsYXNzb2YiLCJidWlsdGluRXhlYyIsImZhaWxzIiwid2tzIiwicmVnZXhwRXhlYyIsIlJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIiwiU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDIiwib3JpZ2luYWxFeGVjIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsIm5hdGl2ZVJlZ0V4cE1ldGhvZCIsImZucyIsIm5hdGl2ZU1ldGhvZCIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsInN0cmZuIiwicnhmbiIsInN0cmluZyIsImZvcmNlZCIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJzdGlja3kiLCIkZmFpbHMiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsImlzQXJyYXkiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BEIiwiJERQIiwiZ09QTiIsIiRKU09OIiwiSlNPTiIsIl9zdHJpbmdpZnkiLCJzdHJpbmdpZnkiLCJISURERU4iLCJUT19QUklNSVRJVkUiLCJpc0VudW0iLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJPYmplY3RQcm90byIsIlVTRV9OQVRJVkUiLCJRT2JqZWN0Iiwic2V0dGVyIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsIkQiLCJwcm90b0Rlc2MiLCJzeW0iLCJpc1N5bWJvbCIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiRSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsIiRzZXQiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImsiLCJmb3IiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCJnZXRLZXlzIiwiZ09QUyIsImdldFN5bWJvbHMiLCJ0b0Fic29sdXRlSW5kZXgiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZWwiLCJmcm9tSW5kZXgiLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiZyIsImhhZFJ1bnRpbWUiLCJpbmRleE9mIiwib2xkUnVudGltZSIsIkludGVybmFsIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJXcmFwcGVyIiwiYW5JbnN0YW5jZSIsImZvck9mIiwic3BlY2llc0NvbnN0cnVjdG9yIiwidGFzayIsIm1pY3JvdGFzayIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsInVzZXJBZ2VudCIsInByb21pc2VSZXNvbHZlIiwidmVyc2lvbnMiLCJ2OCIsIiRQcm9taXNlIiwiaXNOb2RlIiwiZW1wdHkiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsIkZha2VQcm9taXNlIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiaXNUaGVuYWJsZSIsIm5vdGlmeSIsImlzUmVqZWN0IiwiX24iLCJjaGFpbiIsIl9jIiwiX3YiLCJvayIsIl9zIiwicmVhY3Rpb24iLCJleGl0ZWQiLCJoYW5kbGVyIiwiZmFpbCIsImRvbWFpbiIsIl9oIiwib25IYW5kbGVVbmhhbmRsZWQiLCJlbnRlciIsImV4aXQiLCJvblVuaGFuZGxlZCIsImNvbnNvbGUiLCJ1bmhhbmRsZWQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsIl9hIiwidiIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfZCIsIl93IiwiJHJlc29sdmUiLCJ3cmFwcGVyIiwiZXhlY3V0b3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJjYXBhYmlsaXR5IiwieCIsImFsbCIsInJlbWFpbmluZyIsIiRpbmRleCIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwicmV0IiwiQXJyYXlQcm90byIsImdldEl0ZXJhdG9yTWV0aG9kIiwidW4iLCJtYWNyb3Rhc2siLCJPYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiaGVhZCIsImxhc3QiLCJmbHVzaCIsInBhcmVudCIsIm5hdmlnYXRvciIsInN0YW5kYWxvbmUiLCJ0b2dnbGUiLCJub2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsInByb21pc2VDYXBhYmlsaXR5IiwiJGl0ZXJhdG9ycyIsIlRPX1NUUklOR19UQUciLCJBcnJheVZhbHVlcyIsIkRPTUl0ZXJhYmxlcyIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiY29sbGVjdGlvbnMiLCJleHBsaWNpdCIsIkNvbGxlY3Rpb24iLCJVTlNDT1BBQkxFUyIsIiRhdCIsInBvaW50Iiwic3Ryb25nIiwidmFsaWRhdGUiLCJnZXRFbnRyeSIsInJlZGVmaW5lQWxsIiwiJGl0ZXJEZWZpbmUiLCJzZXRTcGVjaWVzIiwiU0laRSIsIl9mIiwiZ2V0Q29uc3RydWN0b3IiLCJJU19NQVAiLCJBRERFUiIsIl9sIiwiZGVsZXRlIiwiY2FsbGJhY2tmbiIsInNldFN0cm9uZyIsIiRpdGVyRGV0ZWN0IiwiaW5oZXJpdElmUmVxdWlyZWQiLCJjb21tb24iLCJJU19XRUFLIiwiZml4TWV0aG9kIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiY2hlY2siLCJ0ZXN0IiwiYnVnZ3kiXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEVBQUFDLEdBQ0EsaUJBQUFDLFNBQUEsaUJBQUFDLE9BQ0FBLE9BQUFELFFBQUFELElBQ0EsbUJBQUFHLGVBQUFDLElBQ0FELE9BQUEsR0FBQUgsR0FDQSxpQkFBQUMsUUFDQUEsUUFBQSxVQUFBRCxJQUVBRCxFQUFBLFVBQUFDLElBUkEsQ0FTQ0ssT0FBQSxXQUNELG1CQ1RBLElBQUFDLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQVAsUUFHQSxJQUFBQyxFQUFBSSxFQUFBRSxHQUFBLENBQ0FDLEVBQUFELEVBQ0FFLEdBQUEsRUFDQVQsUUFBQSxJQVVBLE9BTkFVLEVBQUFILEdBQUFJLEtBQUFWLEVBQUFELFFBQUFDLElBQUFELFFBQUFNLEdBR0FMLEVBQUFRLEdBQUEsRUFHQVIsRUFBQUQsUUEwREEsT0FyREFNLEVBQUFNLEVBQUFGLEVBR0FKLEVBQUFPLEVBQUFSLEVBR0FDLEVBQUFRLEVBQUEsU0FBQWQsRUFBQWUsRUFBQUMsR0FDQVYsRUFBQVcsRUFBQWpCLEVBQUFlLElBQ0FHLE9BQUFDLGVBQUFuQixFQUFBZSxFQUFBLENBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDVixFQUFBZ0IsRUFBQSxTQUFBdEIsR0FDQSxvQkFBQXVCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFuQixFQUFBdUIsT0FBQUMsWUFBQSxDQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQW5CLEVBQUEsY0FBaUR5QixPQUFBLEtBUWpEbkIsRUFBQW9CLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVBQUFBLElBQUFGLEVBQUFuQixFQUFBbUIsSUFDQSxFQUFBRSxFQUFBLE9BQUFGLEVBQ0EsS0FBQUUsR0FBQSxpQkFBQUYsUUFBQUcsV0FBQSxPQUFBSCxF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QndSLEVBQXFCeFIsRUFBUSxJQUFjMFgsSUFDM0MvWCxFQUFBRCxRQUFBLFNBQUFrRyxFQUFBNEIsRUFBQXFRLEdBQ0EsSUFDQXpVLEVBREFnRSxFQUFBSSxFQUFBMEosWUFJRyxPQUZIOUosSUFBQXlRLEdBQUEsbUJBQUF6USxJQUFBaEUsRUFBQWdFLEVBQUF0RixhQUFBK1YsRUFBQS9WLFdBQUFZLEVBQUFVLElBQUFvTyxHQUNBQSxFQUFBNUwsRUFBQXhDLEdBQ0d3QyxvQkNMSCxJQUFBbEQsRUFBZTFDLEVBQVEsR0FDdkJnRCxFQUFlaEQsRUFBUSxHQUN2Qm11QixFQUFBLFNBQUFockIsRUFBQW1LLEdBRUEsR0FEQXRLLEVBQUFHLElBQ0FULEVBQUE0SyxJQUFBLE9BQUFBLEVBQUEsTUFBQTFLLFVBQUEwSyxFQUFBLDhCQUVBM04sRUFBQUQsUUFBQSxDQUNBZ1ksSUFBQTlXLE9BQUE0USxpQkFBQSxnQkFDQSxTQUFBNGMsRUFBQUMsRUFBQTNXLEdBQ0EsS0FDQUEsRUFBYzFYLEVBQVEsR0FBUkEsQ0FBZ0J3QyxTQUFBbkMsS0FBaUJMLEVBQVEsSUFBZ0IrQyxFQUFBbkMsT0FBQWtCLFVBQUEsYUFBQTRWLElBQUEsSUFDdkUwVyxFQUFBLElBQ0FDLElBQUFELGFBQUEvVixPQUNPLE1BQUEvVSxHQUFZK3FCLEdBQUEsRUFDbkIsZ0JBQUFsckIsRUFBQW1LLEdBSUEsT0FIQTZnQixFQUFBaHJCLEVBQUFtSyxHQUNBK2dCLEVBQUFsckIsRUFBQXNPLFVBQUFuRSxFQUNBb0ssRUFBQXZVLEVBQUFtSyxHQUNBbkssR0FWQSxDQVlLLElBQUcsUUFBQW1DLEdBQ1I2b0IiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIlV0aWxUb29sc1wiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJVdGlsVG9vbHNcIl0gPSBmYWN0b3J5KCk7XG59KSh3aW5kb3csIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA2MSk7XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwiZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGluZm8uZG9uZSkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXG4gICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7XG4gICAgICB9XG5cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FzeW5jVG9HZW5lcmF0b3I7IiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi4xJyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE4IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBNRVRBID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHNldERlc2MgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKSBzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogTUVUQSxcbiAgTkVFRDogZmFsc2UsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWs6IGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBCUkVBSyA9IHt9O1xudmFyIFJFVFVSTiA9IHt9O1xudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKSB7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKTtcbiAgdmFyIGYgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XG4gIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3JcbiAgaWYgKGlzQXJyYXlJdGVyKGl0ZXJGbikpIGZvciAobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICByZXN1bHQgPSBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7KSB7XG4gICAgcmVzdWx0ID0gY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5leHBvcnRzLkJSRUFLID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgc2FmZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWdleHBGbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuLy8gVGhpcyBhbHdheXMgcmVmZXJzIHRvIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24sIGJlY2F1c2UgdGhlXG4vLyBTdHJpbmcjcmVwbGFjZSBwb2x5ZmlsbCB1c2VzIC4vZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyxcbi8vIHdoaWNoIGxvYWRzIHRoaXMgZmlsZSBiZWZvcmUgcGF0Y2hpbmcgdGhlIG1ldGhvZC5cbnZhciBuYXRpdmVSZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xuXG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xuXG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLyxcbiAgICAgIHJlMiA9IC9iKi9nO1xuICBuYXRpdmVFeGVjLmNhbGwocmUxLCAnYScpO1xuICBuYXRpdmVFeGVjLmNhbGwocmUyLCAnYScpO1xuICByZXR1cm4gcmUxW0xBU1RfSU5ERVhdICE9PSAwIHx8IHJlMltMQVNUX0lOREVYXSAhPT0gMDtcbn0pKCk7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHJlLnNvdXJjZSArICckKD8hXFxcXHMpJywgcmVnZXhwRmxhZ3MuY2FsbChyZSkpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZVtMQVNUX0lOREVYXTtcblxuICAgIG1hdGNoID0gbmF0aXZlRXhlYy5jYWxsKHJlLCBzdHIpO1xuXG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmVbTEFTVF9JTkRFWF0gPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgbmF0aXZlUmVwbGFjZS5jYWxsKG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4hKGZ1bmN0aW9uKGdsb2JhbCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgcnVudGltZS53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHJ1bnRpbWUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgcnVudGltZS5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIHJ1bnRpbWUudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG59KShcbiAgLy8gSW4gc2xvcHB5IG1vZGUsIHVuYm91bmQgYHRoaXNgIHJlZmVycyB0byB0aGUgZ2xvYmFsIG9iamVjdCwgZmFsbGJhY2sgdG9cbiAgLy8gRnVuY3Rpb24gY29uc3RydWN0b3IgaWYgd2UncmUgaW4gZ2xvYmFsIHN0cmljdCBtb2RlLiBUaGF0IGlzIHNhZGx5IGEgZm9ybVxuICAvLyBvZiBpbmRpcmVjdCBldmFsIHdoaWNoIHZpb2xhdGVzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5LlxuICAoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMgfHwgKHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiICYmIHNlbGYpO1xuICB9KSgpIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKVxuKTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUWVBFKSB7XG4gIGlmICghaXNPYmplY3QoaXQpIHx8IGl0Ll90ICE9PSBUWVBFKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2s7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzczsiLCIvLyDlrp7njrBTeW1ib2wgUHJvbWlzZeeahHB1Yi9zdWLnmoTkuovku7bpqbHliqggIOaJgOacieeahOmpseWKqOaJp+ihjOWujOaIkOWQjuaJp+ihjHByb21pc2Vcbi8vIGltcG9ydCAnQGJhYmVsL3BvbHlmaWxsJztcbi8vIGltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbnZhciBNZXNzYWdlQ2VudHJlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLm1lc3NhZ2VBcnIgPSBuZXcgTWFwKCk7XG4gIHRoaXMuZ2xvYmFsTWVzc2FnZSA9IG5ldyBNYXAoKTtcbiAgdGhpcy5zdWIgPSBhc3luYyBmdW5jdGlvbiAobmFtZSwgeyBmbiwgY29udGV4dCwgYXJncyB9KSB7XG4gICAgbGV0IGZsZXhDb250ZXggPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpWzBdXG4gICAgbGV0IHAgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBmbGV4Q29udGV4Lm9uY2UgPSBmYWxzZVxuICAgICAgbGV0IGZuQXJyID0gdGhpcy5tZXNzYWdlQXJyLmdldChuYW1lKSB8fCBbXTtcbiAgICAgIGZuQXJyLnB1c2goZmxleENvbnRleClcbiAgICAgIHRoaXMubWVzc2FnZUFyci5zZXQobmFtZSwgZm5BcnIpO1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBcbiAgfVxuICAvKipcbiAgICrmiafooYzpqbHliqjkuK3nmoTmjIflrprlh73mlbAg5ZCM5q2l5omn6KGMXG4gICAqL1xuICB0aGlzLnB1YiA9IGFzeW5jIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgbGV0IHAgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgZm5BcnIgPSB0aGlzLm1lc3NhZ2VBcnIuZ2V0KG5hbWUpIHx8IFtdO1xuICAgICAgbGV0IG5ld0ZuQXJyID0gZm5BcnIuZmlsdGVyKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICBsZXQgZm4gPSBpdGVtLmZuOyBsZXQgY29udGV4dCA9IGl0ZW0uY29udGV4dDsgbGV0IGFyZ3MgPSBpdGVtLmFyZ3M7IGxldCBvbmNlID0gaXRlbS5vbmNlXG4gICAgICAgIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICBpZiAoIW9uY2UpIHsgcmV0dXJuIGl0ZW0gfVxuICAgICAgfSlcbiAgICAgIHRoaXMubWVzc2FnZUFyci5zZXQobmFtZSwgbmV3Rm5BcnIpO1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pXG4gICAgcmV0dXJuIHBcbiAgfVxuICAvKipcbiAgICAgKuaJp+ihjOmpseWKqOS4reeahOaMh+WumuWHveaVsCDlvILmraXmiafooYxcbiAgICAgKi9cbiAgdGhpcy5wdWJhc3luYyA9IGFzeW5jIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgbGV0IHAgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgZm5BcnIgPSB0aGlzLm1lc3NhZ2VBcnIuZ2V0KG5hbWUpIHx8IFtdO1xuICAgICAgbGV0IG5ld0ZuQXJyID0gZm5BcnIuZmlsdGVyKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICBsZXQgZm4gPSBpdGVtLmZuOyBsZXQgY29udGV4dCA9IGl0ZW0uY29udGV4dDsgbGV0IGFyZ3MgPSBpdGVtLmFyZ3M7IGxldCBvbmNlID0gaXRlbS5vbmNlXG4gICAgICAgIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICBpZiAoIW9uY2UpIHsgcmV0dXJuIGl0ZW0gfVxuICAgICAgfSlcbiAgICAgIHRoaXMubWVzc2FnZUFyci5zZXQobmFtZSwgbmV3Rm5BcnIpO1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pXG4gICAgcmV0dXJuIHBcbiAgfVxuICAvKipcbiAgICrlj6rlrZjlgqjkuIDmrKHpqbHliqgg5LiA5qyh5oCn6amx5YqoXG4gICAqL1xuICB0aGlzLnN1Yk9uY2UgPSBhc3luYyBmdW5jdGlvbiAobmFtZSwgeyBmbiwgY29udGV4dCwgYXJncyB9KSB7XG4gICAgbGV0IGZsZXhDb250ZXggPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpWzBdO1xuICAgIGxldCBwID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZmxleENvbnRleC5vbmNlID0gdHJ1ZVxuICAgICAgbGV0IGZuQXJyID0gdGhpcy5tZXNzYWdlQXJyLmdldChuYW1lKSB8fCBbXTtcbiAgICAgIGZuQXJyLnB1c2goZmxleENvbnRleCk7XG4gICAgICB0aGlzLm1lc3NhZ2VBcnIuc2V0KG5hbWUsIGZuQXJyKTtcbiAgICAgIHJlc29sdmUoKVxuICAgIH0pO1xuICAgIHJldHVybiBwO1xuICB9XG4gIC8qKlxuICAgKua4heepuuaMh+WumnN1YlxuICAgKi9cbiAgdGhpcy5yZW1vdmVTdWIgPSBhc3luYyBmdW5jdGlvbiAobmFtZSkge1xuICAgIGxldCBwID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IGZuQXJyID0gdGhpcy5tZXNzYWdlQXJyLmdldChuYW1lKSB8fCBbXTtcbiAgICAgIGZuQXJyID0gW107XG4gICAgICB0aGlzLm1lc3NhZ2VBcnIuc2V0KG5hbWUsIGZuQXJyKTtcbiAgICAgIHJlc29sdmUoKVxuICAgIH0pXG4gICAgcmV0dXJuIHA7XG4gIH1cblxuICB0aGlzLmNsZWFyTWVzc2FnZUNlbnRlciA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgcCA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMubWVzc2FnZUFyci5jbGVhcigpO1xuICAgICAgcmVzb2x2ZSgpXG4gICAgfSlcbiAgICByZXR1cm4gcDtcbiAgfVxuICAvKipcbiAgICAgKuiOt+WPluazqOWGjOS4reW/g+S4reW3suazqOWGjOeahOmpseWKqOWQjeensFxuICAgICAqL1xuICB0aGlzLmdldE1lc3NhZ2VOYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBrZXkgPSB0aGlzLm1lc3NhZ2VBcnIua2V5cygpO1xuICAgIGxldCBuYW1lQXJyID0gW107XG4gICAgZm9yIChsZXQgbmFtZSBvZiBrZXkpIHtcbiAgICAgIG5hbWVBcnIucHVzaChuYW1lKVxuICAgIH07XG4gICAgcmV0dXJuIG5hbWVBcnJcbiAgfVxuXG4gIHRoaXMuc2V0R2xvYmFsID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgbGV0IHNuYW1lID0gU3ltYm9sKG5hbWUpO1xuICAgIHRoaXMuZ2xvYmFsTWVzc2FnZS5zZXQoc25hbWUsIHZhbHVlKTtcbiAgICByZXR1cm4gc25hbWVcbiAgfVxuXG4gIHRoaXMuZ2V0R2xvYmFsID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5nbG9iYWxNZXNzYWdlLmdldChuYW1lKSB8fCAnJ1xuICB9XG59XG5cbmNsYXNzIFV0aWx0b29sIHtcbiAgLyoqXG4gICAgICog5Yik5pat5piv5ZCm5Li656m6IOepuui/lOWbnuS4umZhbHNl77yI5Y676Zmk56m65qC877yJXG4gICAgICogQHBhcmFtIGRhdGFcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgc3RhdGljIGlzRW1wdHkgKGRhdGEpIHtcbiAgICBsZXQgc3RyID0gL1xccysvZztcbiAgICBpZiAoIWRhdGEgfHwgZGF0YSA9PT0gJycgfHwgZGF0YSA9PT0gdW5kZWZpbmVkIHx8IGRhdGEgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBsZXQgZGF0YXMgPSBkYXRhLnJlcGxhY2Uoc3RyLCAnJyk7XG4gICAgaWYgKGRhdGFzID09PSAnJykgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgTWVzc2FnZUNlbnRyZSwgVXRpbHRvb2xcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJmAnXXxcXGRcXGQ/fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJmAnXXxcXGRcXGQ/KS9nO1xuXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAocmVnZXhwLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IFN0cmluZyhyZXBsYWNlVmFsdWUpO1xuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG5cbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbiAgZnVuY3Rpb24gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICAgIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgICB9XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICAgIHZhciBjYXB0dXJlO1xuICAgICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBjaDtcbiAgICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gY2g7XG4gICAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgICByZXR1cm4gY2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICAgIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5yZXF1aXJlKCcuL19leHBvcnQnKSh7XG4gIHRhcmdldDogJ1JlZ0V4cCcsXG4gIHByb3RvOiB0cnVlLFxuICBmb3JjZWQ6IHJlZ2V4cEV4ZWMgIT09IC8uLy5leGVjXG59LCB7XG4gIGV4ZWM6IHJlZ2V4cEV4ZWNcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vLyBUaGlzIG1ldGhvZCBvZiBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QgbmVlZHMgdG8gYmVcbi8vIGtlcHQgaWRlbnRpY2FsIHRvIHRoZSB3YXkgaXQgaXMgb2J0YWluZWQgaW4gcnVudGltZS5qc1xudmFyIGcgPSAoZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzIHx8ICh0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiAmJiBzZWxmKTtcbn0pKCkgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xuXG4vLyBVc2UgYGdldE93blByb3BlcnR5TmFtZXNgIGJlY2F1c2Ugbm90IGFsbCBicm93c2VycyBzdXBwb3J0IGNhbGxpbmdcbi8vIGBoYXNPd25Qcm9wZXJ0eWAgb24gdGhlIGdsb2JhbCBgc2VsZmAgb2JqZWN0IGluIGEgd29ya2VyLiBTZWUgIzE4My5cbnZhciBoYWRSdW50aW1lID0gZy5yZWdlbmVyYXRvclJ1bnRpbWUgJiZcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZykuaW5kZXhPZihcInJlZ2VuZXJhdG9yUnVudGltZVwiKSA+PSAwO1xuXG4vLyBTYXZlIHRoZSBvbGQgcmVnZW5lcmF0b3JSdW50aW1lIGluIGNhc2UgaXQgbmVlZHMgdG8gYmUgcmVzdG9yZWQgbGF0ZXIuXG52YXIgb2xkUnVudGltZSA9IGhhZFJ1bnRpbWUgJiYgZy5yZWdlbmVyYXRvclJ1bnRpbWU7XG5cbi8vIEZvcmNlIHJlZXZhbHV0YXRpb24gb2YgcnVudGltZS5qcy5cbmcucmVnZW5lcmF0b3JSdW50aW1lID0gdW5kZWZpbmVkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3J1bnRpbWVcIik7XG5cbmlmIChoYWRSdW50aW1lKSB7XG4gIC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIHJ1bnRpbWUuXG4gIGcucmVnZW5lcmF0b3JSdW50aW1lID0gb2xkUnVudGltZTtcbn0gZWxzZSB7XG4gIC8vIFJlbW92ZSB0aGUgZ2xvYmFsIHByb3BlcnR5IGFkZGVkIGJ5IHJ1bnRpbWUuanMuXG4gIHRyeSB7XG4gICAgZGVsZXRlIGcucmVnZW5lcmF0b3JSdW50aW1lO1xuICB9IGNhdGNoKGUpIHtcbiAgICBnLnJlZ2VuZXJhdG9yUnVudGltZSA9IHVuZGVmaW5lZDtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52OCB8fCAnJztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgICB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpXG4gICAgICAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2VcbiAgICAgIC8vIHY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAgICAgLy8gd2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICAgICYmIHY4LmluZGV4T2YoJzYuNicpICE9PSAwXG4gICAgICAmJiB1c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lLzY2JykgPT09IC0xO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gKHJlYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIG1heSB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgcmV0dXJuIHByb21pc2UuX2ggIT09IDEgJiYgKHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYykubGVuZ3RoID09PSAwO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBPYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyBTYWZhcmkgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIgJiYgIShnbG9iYWwubmF2aWdhdG9yICYmIGdsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICAgIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBNQVAgPSAnTWFwJztcblxuLy8gMjMuMSBNYXAgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoTUFQLCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgTUFQKSwga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGZhc3RLZXkgPSByZXF1aXJlKCcuL19tZXRhJykuZmFzdEtleTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTSVpFID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gIHZhciBlbnRyeTtcbiAgaWYgKGluZGV4ICE9PSAnRicpIHJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvciAoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgaWYgKGVudHJ5LmsgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgZm9yICh2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnApIGVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uO1xuICAgICAgICAgIHZhciBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJldikgcHJldi5uID0gbmV4dDtcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZiAodGhhdC5fZiA9PSBlbnRyeSkgdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYgKHRoYXQuX2wgPT0gZW50cnkpIHRoYXQuX2wgPSBwcmV2O1xuICAgICAgICAgIHRoYXRbU0laRV0tLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXMuX2YpIHtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuNyBNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSwga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGUodGhpcywgTkFNRSlbU0laRV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgIHZhciBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcbiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXQuX2wgPSBlbnRyeSA9IHtcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG4gICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXlcbiAgICAgICAgdjogdmFsdWUsICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxuICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeVxuICAgICAgICByOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gcmVtb3ZlZFxuICAgICAgfTtcbiAgICAgIGlmICghdGhhdC5fZikgdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYgKHByZXYpIHByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgdGhhdC5faVtpbmRleF0gPSBlbnRyeTtcbiAgICB9IHJldHVybiB0aGF0O1xuICB9LFxuICBnZXRFbnRyeTogZ2V0RW50cnksXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKEMsIE5BTUUsIElTX01BUCkge1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHRoaXMuX3QgPSB2YWxpZGF0ZShpdGVyYXRlZCwgTkFNRSk7IC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgICAgICAgICAgICAgICAgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIga2luZCA9IHRoYXQuX2s7XG4gICAgICB2YXIgZW50cnkgPSB0aGF0Ll9sO1xuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghdGhhdC5fdCB8fCAhKHRoYXQuX2wgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoYXQuX3QuX2YpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcbiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XG4gIHZhciBDID0gQmFzZTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcbiAgdmFyIE8gPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9O1xuICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7IG5ldyBDKGl0ZXIpOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UoKSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpIGRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykge1xuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgdmFyIFA7XG4gIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==